<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jackie</title>
    <link>https://jackiezhongtian.github.io:443/</link>
    <description>Recent content on Jackie</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>jackie</copyright>
    <lastBuildDate>Thu, 13 May 2021 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://jackiezhongtian.github.io:443/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>https://jackiezhongtian.github.io:443/about/</link>
      <pubDate>Sat, 20 Oct 2018 21:38:52 +0800</pubDate>
      
      <guid>https://jackiezhongtian.github.io:443/about/</guid>
      
        <description>&lt;p&gt;早年与互联网接触，便一发不可收拾，热爱互联网，关注互联网业内的众多产品，不断扩充对行业发展趋势的认识；&lt;/p&gt;
&lt;p&gt;除了互联网，我还热爱电影、音乐、旅游；&lt;/p&gt;
&lt;p&gt;我简简单单；心直口快；没有华丽的外表；&lt;/p&gt;
&lt;p&gt;没多少财富；我不喜欢做作；也不喜欢耍酷；更不喜欢说一些违心的话语；我不喜欢想象；但偶尔也生活在梦里。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>云原生与微服务是啥关系？</title>
      <link>https://jackiezhongtian.github.io:443/post/sc-1/</link>
      <pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jackiezhongtian.github.io:443/post/sc-1/</guid>
      
        <description>&lt;p&gt;要了解云原生与微服务是啥关系？我们首先需要了解一下CNCF，即云原生计算基金会，2015年由谷歌牵头成立，基金会成员目前已有一百多企业与机构，包括亚马逊、微软、思科等巨头。目前CNCF所托管的应用已达14个，知名的项目有Kubernetes、Prometheus、Envoy等。目前，Kubernetes成为了CNCF的第一个毕业项目！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jackiezhongtian.github.io:443/img/config/cncf.png&#34; alt=&#34;cncf&#34; title=&#34;cncf&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;云原生&#34;&gt;云原生&lt;/h3&gt;
&lt;p&gt;CNCF宪章中给出了云原生应用的三大特征，概括说来如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容器化封装：以容器为基础，提高整体开发水平，形成代码和组件重用，简化云原生应用程序的维护。在容器中运行应用程序和进程，并作为应用程序部署的独立单元，实现高水平资源隔离。&lt;/li&gt;
&lt;li&gt;动态管理：通过集中式的编排调度系统来动态的管理和调度。&lt;/li&gt;
&lt;li&gt;面向微服务：明确服务间的依赖，互相解耦。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;云原生包含了一组应用的模式，用于帮助企业快速，持续，可靠，规模化地交付业务软件。云原生由微服务架构，DevOps 和以容器为代表的敏捷基础架构组成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jackiezhongtian.github.io:443/img/config/cloud-native-architecutre-mindnode.jpg&#34; alt=&#34;云原生架构组成&#34; title=&#34;云原生架构组成&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;the-twelve-factors&#34;&gt;The Twelve Factors&lt;/h3&gt;
&lt;p&gt;12-Factors经常被直译为12要素，也被称为12原则，12原则由公有云PaaS的先驱Heroku于2012年提出（https://12factor.net/），目的是告诉开发者如何利用云平台提供的便利来开发更具可靠性和扩展性、更加易于维护的云原生应用。具体如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基准代码&lt;/li&gt;
&lt;li&gt;显式声明依赖关系&lt;/li&gt;
&lt;li&gt;在环境中存储配置&lt;/li&gt;
&lt;li&gt;把后端服务当作附加资源&lt;/li&gt;
&lt;li&gt;严格分离构建、发布和运行&lt;/li&gt;
&lt;li&gt;无状态进程&lt;/li&gt;
&lt;li&gt;通过端口绑定提供服务&lt;/li&gt;
&lt;li&gt;通过进程模型进行扩展&lt;/li&gt;
&lt;li&gt;快速启动和优雅终止&lt;/li&gt;
&lt;li&gt;开发环境与线上环境等价&lt;/li&gt;
&lt;li&gt;日志作为事件流&lt;/li&gt;
&lt;li&gt;管理进程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外还有补充的三点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;API声明管理&lt;/li&gt;
&lt;li&gt;认证和授权&lt;/li&gt;
&lt;li&gt;监控与告警&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;距离12原则的提出已有六年多，12原则的有些细节可能已经不那么跟得上时代，也有人批评12原则的提出从一开始就有过于依赖Heroku自身特性的倾向。不过不管怎么说，12原则依旧是业界最为系统的云原生应用开发指南。&lt;/p&gt;
&lt;h3 id=&#34;容器化&#34;&gt;容器化&lt;/h3&gt;
&lt;p&gt;Docker是一个开源的引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。最近几年Docker容器化技术很火，在各种场合都能够听到关于Docker的分享。Docker让开发工程师可以将他们的应用和依赖封装到一个可移植的容器中。Docker根本的想法是创建软件程序可移植的轻量容器，让其可以在任何安装了Docker的机器上运行，而不用关心底层操作系统。&lt;/p&gt;
&lt;p&gt;Docker可以解决虚拟机能够解决的问题，同时也能够解决虚拟机由于资源要求过高而无法解决的问题。其优势包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;隔离应用依赖&lt;/li&gt;
&lt;li&gt;创建应用镜像并进行复制&lt;/li&gt;
&lt;li&gt;创建容易分发的即启即用的应用&lt;/li&gt;
&lt;li&gt;允许实例简单、快速地扩展&lt;/li&gt;
&lt;li&gt;测试应用并随后销毁它们&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虽然自动化运维工具可以降低环境搭建的复杂度，但仍然不能从根本上解决环境的问题。在看似稳定而成熟的场景下，结合使用Docker显然能带来更多的好处。&lt;/p&gt;
&lt;p&gt;一旦拥抱了容器，这就需要一个编排框架来调度和管理容器。最常见的编排框架有Kubernetes、Mesos、DockerSwarm。Kubernetes是目前市场上最成熟的、最具扩展性的解决方案，占有最大的市场份额。Kubernetes不是Docker容器的杀手，而是推动者。更进一步地说，编排框架是容器平台的商品，它会驱动容器运行时的使用，编排框架是容器平台的关键组成部分。&lt;/p&gt;
&lt;p&gt;持此之外，云原生还有 DevOps 和微服务两个关键的技术，我们将在下篇文章介绍。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>微服务认证与授权 Spring Security：AbstractUserDetailsAuthenticationProvider 分析</title>
      <link>https://jackiezhongtian.github.io:443/post/security-20/</link>
      <pubDate>Tue, 27 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jackiezhongtian.github.io:443/post/security-20/</guid>
      
        <description>&lt;p&gt;开始新的系列文章更新，一起在技术的路上精进！这个系列将会介绍 Spring Cloud Security。对于一个服务系统，安全是必须需要考虑的方面。应用安全是一个不断追求更强的目标，全面性、全系统的方法很重要，因为开发者永远不知道入侵者是如何对系统进行攻击。在系统安全的实现上，一般倡导使用安全层&lt;code&gt;layers of security&lt;/code&gt;，即多层次安全保证，通过连续层提供额外的安全性。每一层的安全性越强，应用程序的健壮性和安全性就越高。Java EE应用程序位于安全层的高层次，需要为它添加特定的问题域安全配置。&lt;/p&gt;
&lt;h3 id=&#34;abstractuserdetailsauthenticationprovider&#34;&gt;AbstractUserDetailsAuthenticationProvider&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;AbstractUserDetailsAuthenticationProvider&lt;/code&gt;继承于&lt;code&gt;AuthenticationProvider&lt;/code&gt;，是最常用的用户名密码认证的&lt;code&gt;AuthenticationProvider&lt;/code&gt;抽象类，它将认证&lt;code&gt;UsernamePasswordAuthenticationToken&lt;/code&gt;(&lt;code&gt;Authentication&lt;/code&gt;的一个子类，&lt;code&gt;UsernamePasswordAuthenticationToken&lt;/code&gt;中封装了请求用户的用户名和密码用于认证。&lt;code&gt;AbstractUserDetailsAuthenticationProvider&lt;/code&gt;的默认实现为&lt;code&gt;DaoAuthenticationProvider&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AbstractUserDetailsAuthenticationProvider#authenticate()&lt;/code&gt;方法代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Authentication &lt;span style=&#34;color:#a6e22e&#34;&gt;authenticate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Authentication authentication&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; AuthenticationException &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;// 检查传递的Authentication是否为UsernamePasswordAuthenticationToken
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			Assert&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isInstanceOf&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;UsernamePasswordAuthenticationToken&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; authentication&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
				messages&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getMessage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(...));&lt;/span&gt;

	String username &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;authentication&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getPrincipal&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NONE_PROVIDED&amp;#34;&lt;/span&gt;
			&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; authentication&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

  	&lt;span style=&#34;color:#75715e&#34;&gt;//尝试从缓存中获取用户信息
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; cacheWasUsed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
	UserDetails user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;userCache&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getUserFromCache&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;username&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;user &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		cacheWasUsed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color:#75715e&#34;&gt;//缓存中没有用户时，尝试从用户信息的来源获取，一般是数据库
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; retrieveUser&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;username&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
						&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;UsernamePasswordAuthenticationToken&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; authentication&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;UsernameNotFoundException notFound&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;hideUserNotFoundExceptions&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BadCredentialsException&lt;span style=&#34;color:#f92672&#34;&gt;(...);&lt;/span&gt;
			&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; notFound&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
			&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
      	&lt;span style=&#34;color:#75715e&#34;&gt;//认证后返回的user为null，说明用户不存在，认证失败
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		Assert&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;notNull&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;user&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
					&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;retrieveUser returned null - a violation of the interface contract&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#75715e&#34;&gt;//认证前置处理
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		preAuthenticationChecks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;check&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;user&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		&lt;span style=&#34;color:#75715e&#34;&gt;//该方法为抽象方法，延迟到子类实现。可以在子类中添加自定义的认证处理工作，一般是对比密码之类的。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		additionalAuthenticationChecks&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;user&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
					&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;UsernamePasswordAuthenticationToken&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; authentication&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;AuthenticationException exception&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cacheWasUsed&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color:#75715e&#34;&gt;// 如果缓存中获取的UserDetails认证检查失败，将从用户信息来源获取用户信息进行认证检查
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			cacheWasUsed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
			user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; retrieveUser&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;username&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
						&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;UsernamePasswordAuthenticationToken&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; authentication&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
				preAuthenticationChecks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;check&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;user&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
				additionalAuthenticationChecks&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;user&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
						&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;UsernamePasswordAuthenticationToken&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; authentication&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; exception&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
  	&lt;span style=&#34;color:#75715e&#34;&gt;//认证后置处理
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	postAuthenticationChecks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;check&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;user&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
   	&lt;span style=&#34;color:#75715e&#34;&gt;//如果缓存中没有该UserDetails，将其放进缓存
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(!&lt;/span&gt;cacheWasUsed&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;userCache&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;putUserInCache&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;user&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

	Object principalToReturn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; user&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;forcePrincipalAsString&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		principalToReturn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getUsername&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
   	&lt;span style=&#34;color:#75715e&#34;&gt;//返回认证成功的UsernamePasswordAuthenticationToken
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; createSuccessAuthentication&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;principalToReturn&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; authentication&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; user&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在&lt;code&gt;AbstractUserDetailsAuthenticationProvider#authenticate()&lt;/code&gt;认证方法中，仅对&lt;code&gt;UsernamePasswordAuthenticationToken&lt;/code&gt;进行认证。它将尝试从缓存或者用户信息的来源处(如数据库等)根据&lt;code&gt;UsernamePasswordAuthenticationToken.principal&lt;/code&gt;(用户名)加载用户信息&lt;code&gt;UserDetails&lt;/code&gt;，将&lt;code&gt;UsernamePasswordAuthenticationToken&lt;/code&gt;中的用户信息(用户名和密码)与&lt;code&gt;UserDetails&lt;/code&gt;中的信息进行对比认证(&lt;code&gt;additionalAuthenticationChecks()&lt;/code&gt;方法中)，如果信息一致，将调用&lt;code&gt;createSuccessAuthentication()&lt;/code&gt;返回认证成功的&lt;code&gt;UsernamePasswordAuthenticationToken&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;createSuccessAuthentication()&lt;/code&gt;方法的实现如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; Authentication &lt;span style=&#34;color:#a6e22e&#34;&gt;createSuccessAuthentication&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Object principal&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
		Authentication authentication&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; UserDetails user&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;//返回一些必要的信息，并且设置isAuthenticated为true
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	UsernamePasswordAuthenticationToken result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; UsernamePasswordAuthenticationToken&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
			principal&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; authentication&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getCredentials&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt;
			authoritiesMapper&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mapAuthorities&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getAuthorities&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()));&lt;/span&gt;
	result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setDetails&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;authentication&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getDetails&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;createSuccessAuthentication()&lt;/code&gt;方法为&lt;code&gt;UsernamePasswordAuthenticationToken&lt;/code&gt;注入更丰富的用户信息以及将isAuthenticated设置为true，返回认证成功的&lt;code&gt;AuthenticationToken&lt;/code&gt;。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>微服务认证与授权 Spring Security：AuthenticationProvider 分析</title>
      <link>https://jackiezhongtian.github.io:443/post/security-19/</link>
      <pubDate>Sun, 11 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jackiezhongtian.github.io:443/post/security-19/</guid>
      
        <description>&lt;p&gt;开始新的系列文章更新，一起在技术的路上精进！这个系列将会介绍 Spring Cloud Security。对于一个服务系统，安全是必须需要考虑的方面。应用安全是一个不断追求更强的目标，全面性、全系统的方法很重要，因为开发者永远不知道入侵者是如何对系统进行攻击。在系统安全的实现上，一般倡导使用安全层&lt;code&gt;layers of security&lt;/code&gt;，即多层次安全保证，通过连续层提供额外的安全性。每一层的安全性越强，应用程序的健壮性和安全性就越高。Java EE应用程序位于安全层的高层次，需要为它添加特定的问题域安全配置。&lt;/p&gt;
&lt;h3 id=&#34;authenticationprovider&#34;&gt;AuthenticationProvider&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;AuthenticationProvider&lt;/code&gt;是真正进行认证的工作的接口类，它将对具体的&lt;code&gt;Authentication&lt;/code&gt;进行认证工作。通过注入不同的排列组合的&lt;code&gt;AuthenticationProvider&lt;/code&gt;实现，使得&lt;code&gt;ProviderManager&lt;/code&gt;可以针对不同的请求进行可配置化的认证。&lt;/p&gt;
&lt;p&gt;其内提供的接口如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AuthenticationProvider&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;//执行认证的具体方法
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//通常会返回一个带有credentials的被认证过的Authentication
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//当不支持认证传递过来的Authentication时，也可能返回null，然后下一个AuthenticationProvider会在ProviderManager被调用进行认证
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//认证失败会抛出AuthenticationException
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Authentication &lt;span style=&#34;color:#a6e22e&#34;&gt;authenticate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Authentication authentication&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; AuthenticationException&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;//返回该AuthenticationProvider是否支持认证该Authentication类型
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//然而返回true也不能保证一定能进行认证，authenticate方法依然有可能会返回null
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;supports&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Class&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; authentication&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在spring-security中&lt;code&gt;AuthenticationProvider&lt;/code&gt;有非常多的默认实现，下面的类图展示了部分的实现类。
&lt;img src=&#34;https://jackiezhongtian.github.io:443/img/sec/%E5%9B%BE12-4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;有用户名密码认证的&lt;code&gt;AbstractUserDetailsAuthenticationProvider&lt;/code&gt;，进行预认证的&lt;code&gt;PreAuthenticationProvider&lt;/code&gt;，使用google账号进行认证&lt;code&gt;GoogleAccountsAuthenticationProvider&lt;/code&gt;，还有匿名认证的&lt;code&gt;AnonymousAuthenticationProvider&lt;/code&gt;等等。&lt;/p&gt;
&lt;p&gt;我们将对最常用的账号密码登陆认证的&lt;code&gt;AbstractUserDetailsAuthenticationProvider&lt;/code&gt;进行介绍，其他类型的&lt;code&gt;AuthenticationProvider&lt;/code&gt;有兴趣的读者可以自行去了解。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>微服务认证与授权 Spring Security：ProviderManager（下）</title>
      <link>https://jackiezhongtian.github.io:443/post/security-18/</link>
      <pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jackiezhongtian.github.io:443/post/security-18/</guid>
      
        <description>&lt;p&gt;开始新的系列文章更新，一起在技术的路上精进！这个系列将会介绍 Spring Cloud Security。对于一个服务系统，安全是必须需要考虑的方面。应用安全是一个不断追求更强的目标，全面性、全系统的方法很重要，因为开发者永远不知道入侵者是如何对系统进行攻击。在系统安全的实现上，一般倡导使用安全层&lt;code&gt;layers of security&lt;/code&gt;，即多层次安全保证，通过连续层提供额外的安全性。每一层的安全性越强，应用程序的健壮性和安全性就越高。Java EE应用程序位于安全层的高层次，需要为它添加特定的问题域安全配置。&lt;/p&gt;
&lt;h3 id=&#34;providermanager下&#34;&gt;ProviderManager（下）&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&lt;/code&gt;ProviderManager`中的认证流程方法实现如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Authentication &lt;span style=&#34;color:#a6e22e&#34;&gt;authenticate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Authentication authentication&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; AuthenticationException &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	Class&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Authentication&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; toTest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; authentication&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getClass&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
	AuthenticationException lastException &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
	Authentication result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;//循环调用AuthenticationProvider尝试对Authentication进行认证
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;AuthenticationProvider provider &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; getProviders&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#75715e&#34;&gt;//检查AuthenticationProvider是否支持对该类Authentication进行认证，
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;//如果不支持，则进入下一个循环
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(!&lt;/span&gt;provider&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;supports&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;toTest&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
		&lt;span style=&#34;color:#75715e&#34;&gt;//注意在循环调用的过程中，如果没有认证成功，只有最后一次的捕捉的异常有效
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
			result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; provider&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;authenticate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;authentication&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;result &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
				&lt;span style=&#34;color:#75715e&#34;&gt;// 认证成功，为Authentication注入更丰富的用户信息
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;				copyDetails&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;authentication&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; result&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
			&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;AccountStatusException e&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; e&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;InternalAuthenticationServiceException e&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
			prepareException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;e&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; authentication&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; e&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;AuthenticationException e&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
			lastException &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; e&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;//在AuthenticationProvider列表尝试认证失败后尝试调用parent进行认证
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;result &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; parent &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#75715e&#34;&gt;// Allow the parent to try.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
			result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; parent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;authenticate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;authentication&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ProviderNotFoundException e&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;AuthenticationException e&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
			lastException &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; e&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;//认证成功后的清理操作或者其他操作
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;result &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;eraseCredentialsAfterAuthentication
				&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;result &lt;span style=&#34;color:#66d9ef&#34;&gt;instanceof&lt;/span&gt; CredentialsContainer&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color:#75715e&#34;&gt;// Authentication is complete. Remove credentials and other secret data
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#75715e&#34;&gt;// from authentication
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;CredentialsContainer&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; result&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;eraseCredentials&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
		&lt;span style=&#34;color:#75715e&#34;&gt;//认证成功的事件广播
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		eventPublisher&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;publishAuthenticationSuccess&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;result&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;//认证失败的抛出最后一次保留的异常
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;lastException &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		lastException &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ProviderNotFoundException&lt;span style=&#34;color:#f92672&#34;&gt;(...);&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
   	&lt;span style=&#34;color:#75715e&#34;&gt;//认证失败的广播事件
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	prepareException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;lastException&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; authentication&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; lastException&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;ProviderManager#authenticate()&lt;/code&gt;方法将根据&lt;code&gt;Authentication&lt;/code&gt;的类型遍历&lt;code&gt;AuthenticationProvider&lt;/code&gt;列表，委托合适的&lt;code&gt;AuthenticationProvider&lt;/code&gt;对&lt;code&gt;Authentication&lt;/code&gt;认证的。如果认证成功，将根据认证结果为&lt;code&gt;Authentication&lt;/code&gt;注入更丰富的用户信息，如用户权限等，清理掉&lt;code&gt;Authentication&lt;/code&gt;中的敏感信息，如&lt;code&gt;Credentials&lt;/code&gt;用户凭证，最后返回认证成功的&lt;code&gt;Authentication&lt;/code&gt;；认证失败将会抛出对认证失败的异常&lt;code&gt;AuthenticationException&lt;/code&gt;。如果认证过程没有找到合适&lt;code&gt;AuthenticationProvider&lt;/code&gt;对&lt;code&gt;Authentication&lt;/code&gt;进行认证，将会抛出&lt;code&gt;ProviderNotFoundException&lt;/code&gt;异常。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Spring Cloud 中的消息总线</title>
      <link>https://jackiezhongtian.github.io:443/post/bus-1/</link>
      <pubDate>Mon, 15 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jackiezhongtian.github.io:443/post/bus-1/</guid>
      
        <description>&lt;p&gt;消息总线：Spring Cloud Bus
ESB（企业服务总线）是SOA（面向服务架构）的一种常见的设计实践。基于总线的设计，借鉴了计算机内部硬件组成的设计思想：通过总线传输数据。在分布式系统中，不同子系统之间需要实现相互通信和远程调用，比较直接的方式就是“点对点”的通信方式，但是这样会暴露出一些很明显的问题：系统之间紧密耦合、配置和引用混乱、服务调用关系错综复杂、难以统一管理、异构系统之间存在不兼容等。而基于总线的设计，正是为了解决上述问题。总线则作为中枢系统，提供统一的服务入口，并实现了服务统一管理、服务路由、协议转换、数据格式转换等功能。这样能够将不同系统有效地连接起来，并大大降低了连接数（每个子系统只需要和总线建立连接）和系统间连接拓扑的复杂度。&lt;/p&gt;
&lt;p&gt;Spring Cloud 作为微服务架构综合性的解决方案，也提供了一套实现的组件Spring Cloud Bus。Spring Cloud Bus基于Spring Cloud Stream，Spring Cloud Stream屏蔽了底层消息中间件的差异性，在其之上封装成各种Binder，在上一章已经具体讲解过。通过Spring Cloud Bus，可以非常容易的搭建起消息总线，同时实现了一些消息总线中的常用功能，比如与Spring Cloud Config一起实现微服务应用配置信息的动态更新等。&lt;/p&gt;
&lt;h3 id=&#34;应用场景设计&#34;&gt;应用场景设计&lt;/h3&gt;
&lt;p&gt;在前面我们讲了微服务架构下，配置中心的用法与实现。配置仓库中的配置信息变更，如何即使通知到应用服务，并及时刷新上下文信息？在前面，我们的做法是引入了 &lt;code&gt;spring boot&lt;/code&gt; 监控的依赖&lt;code&gt;spring-boot-starter-actuator&lt;/code&gt;。通过其提供的&lt;code&gt;/refresh&lt;/code&gt;端点，配置到git的webhook，当提交代码到配置仓库时，将会触发钩子，使得应用服务能够刷新。&lt;/p&gt;
&lt;p&gt;这样做，显然是不够的。微服务的数量极多，手工去维护变得极为复杂。我们在上面介绍了消息总线，利用消息代理将各个服务连接起来，将消息路由到目标服务实例。看一下我们的设计的架构图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jackiezhongtian.github.io:443/img/bus/bus-arch.png&#34; alt=&#34;request&#34; title=&#34;配置变更通知&#34;&gt;&lt;/p&gt;
&lt;p&gt;和之前的配置中心架构不一样的地方在于，增加了消息总线，消息总线连接了Config-Server和Config-Client。当配置提交到配置仓库时，利用webhook或者手动访问&lt;code&gt;/bus/refresh&lt;/code&gt;端点，Config-Server将会将变更消息通知到各个客户端。&lt;/p&gt;
&lt;p&gt;主要涉及到的服务如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置服务器Config-Server，从配置仓库中拉取配置，注册到服务发现组件consul，并为配置客户端提供配置信息&lt;/li&gt;
&lt;li&gt;配置客户端Config-Client-1，注册到服务发现组件consul，启动时同配置服务器拉取配置&lt;/li&gt;
&lt;li&gt;配置客户端Config-Client-2，同上&lt;/li&gt;
&lt;li&gt;配置仓库Config-Repo，使用的是git存储配置信息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面文章我们进行相应的改写，以实施我们本文设计的方案。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Spring Boot集成MyBatis实现通用Mapper</title>
      <link>https://jackiezhongtian.github.io:443/post/mybatis/</link>
      <pubDate>Tue, 09 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jackiezhongtian.github.io:443/post/mybatis/</guid>
      
        <description>&lt;h2 id=&#34;mybatis&#34;&gt;MyBatis&lt;/h2&gt;
&lt;p&gt;关于MyBatis，大部分人都很熟悉。MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。&lt;/p&gt;
&lt;p&gt;不管是DDD（Domain Driven Design，领域驱动建模）还是分层架构的风格，都会涉及到对数据库持久层的操作，本文将会讲解Spring Boot集成MyBatis如何实现通用Mapper。&lt;/p&gt;
&lt;h2 id=&#34;spring-boot集成mybatis&#34;&gt;Spring Boot集成MyBatis&lt;/h2&gt;
&lt;h3 id=&#34;引入依赖&#34;&gt;引入依赖&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.mybatis.spring.boot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;mybatis-spring-boot-starter&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.3.1&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;mysql&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;mysql-connector-java&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.projectlombok&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;lombok&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.zaxxer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;HikariCP&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到如上关于Mybatis引入了&lt;code&gt;mybatis-spring-boot-starter&lt;/code&gt;，由Mybatis提供的starter。&lt;/p&gt;
&lt;h3 id=&#34;数据库配置&#34;&gt;数据库配置&lt;/h3&gt;
&lt;p&gt;在application.yml中增加如下配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;datasource&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;hikari&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;connection-test-query&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;SELECT 1&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;minimum-idle&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;maximum-pool-size&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;pool-name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;dbcp1&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;driver-class-name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;com.mysql.jdbc.Driver&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;url&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;jdbc:mysql://localhost:3306/test?autoReconnect=true&amp;amp;useSSL=false&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf-8&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;username&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;user&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;password&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;pwd&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;com.zaxxer.hikari.HikariDataSource&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;schema[0]&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;classpath:/init.sql&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;initialize&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，我们配置了hikari和数据库的基本信息。在应用服务启动时，会自动初始化classpath下的sql脚本。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;IF&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;EXISTS&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;test&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt; (
  &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;id&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt; bigint(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;) unsigned &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;local_name&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt; varchar(&lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt; ,
  &lt;span style=&#34;color:#66d9ef&#34;&gt;PRIMARY&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;KEY&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;id&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;)
) ENGINE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;InnoDB &lt;span style=&#34;color:#66d9ef&#34;&gt;DEFAULT&lt;/span&gt; CHARSET&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;utf8;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在sql脚本中，我们创建了一张&lt;code&gt;test&lt;/code&gt;表。&lt;/p&gt;
&lt;p&gt;到这里，后面我们一般需要配置Mybatis映射的xml文件和实体类的路径。根据mybatis generator 自动生成代码。包括&lt;code&gt;XXMapper.java&lt;/code&gt;,&lt;code&gt;XXEntity.java&lt;/code&gt;, &lt;code&gt;XXMapper.xml&lt;/code&gt;。这里我们就不演示了，直接进入下一步的通用Mapper实现。&lt;/p&gt;
&lt;h2 id=&#34;通用mapper的使用&#34;&gt;通用Mapper的使用&lt;/h2&gt;
&lt;h3 id=&#34;引入依赖-1&#34;&gt;引入依赖&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;tk.mybatis&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;mapper&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;3.4.0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通用Mapper的作者&lt;a href=&#34;https://github.com/abel533/Mapper&#34;&gt;abel533&lt;/a&gt;，有兴趣可阅读源码。&lt;/p&gt;
&lt;h3 id=&#34;配置通用mapper&#34;&gt;配置通用Mapper&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.context.annotation.Bean&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.context.annotation.Configuration&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tk.mybatis.spring.mapper.MapperScannerConfigurer&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.util.Properties&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;@Configuration&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyBatisMapperScannerConfig&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; MapperScannerConfigurer &lt;span style=&#34;color:#a6e22e&#34;&gt;mapperScannerConfigurer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        MapperScannerConfigurer mapperScannerConfigurer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MapperScannerConfigurer&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        mapperScannerConfigurer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setSqlSessionFactoryBeanName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sqlSessionFactory&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        mapperScannerConfigurer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setBasePackage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.blueskykong.mybatis.dao&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//扫描该路径下的dao
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        Properties properties &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Properties&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        properties&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setProperty&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mappers&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.blueskykong.mybatis.config.BaseDao&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//通用dao
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        properties&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setProperty&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;notEmpty&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        properties&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setProperty&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IDENTITY&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MYSQL&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        mapperScannerConfigurer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setProperties&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;properties&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; mapperScannerConfigurer&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在配置中，设定了指定路径下的dao，并指定了通用dao。需要注意的是，&lt;code&gt;MapperScannerConfigurer&lt;/code&gt;来自于&lt;code&gt;tk.mybatis.spring.mapper&lt;/code&gt;包下。&lt;/p&gt;
&lt;h3 id=&#34;basedao&#34;&gt;BaseDao&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tk.mybatis.mapper.common.Mapper&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tk.mybatis.mapper.common.MySqlMapper&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BaseDao&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Mapper&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;,&lt;/span&gt;MySqlMapper&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;{&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通用Mapper接口，其他接口继承该接口即可。&lt;/p&gt;
&lt;h3 id=&#34;创建实体&#34;&gt;创建实体&lt;/h3&gt;
&lt;p&gt;我们需要添加&lt;code&gt;test&lt;/code&gt;表对应的实体。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Data&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@Table&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@AllArgsConstructor&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@NoArgsConstructor&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TestModel&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Id&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Column&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@GeneratedValue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;strategy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GenerationType&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;IDENTITY&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Integer id&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String localName&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中，&lt;code&gt;@Table(name = &amp;quot;test&amp;quot;)&lt;/code&gt;注解指定了该实体对应的数据库表名。&lt;/p&gt;
&lt;h3 id=&#34;配置文件&#34;&gt;配置文件&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;mybatis&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;configuration&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;map-underscore-to-camel-case&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了更好地映射Java实体和数据库字段，我们指定下划线驼峰法的映射配置。&lt;/p&gt;
&lt;h3 id=&#34;testdao编写&#34;&gt;TestDao编写&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TestDao&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; BaseDao&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TestModel&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;


    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Insert&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;insert into test(id, local_name) values(#{id}, #{localName})&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    Integer &lt;span style=&#34;color:#a6e22e&#34;&gt;insertTestModel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;TestModel testModel&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;TestDao&lt;/code&gt;继承自&lt;code&gt;BaseDao&lt;/code&gt;，并指定了泛型为对应的&lt;code&gt;TestModel&lt;/code&gt;。&lt;code&gt;TestDao&lt;/code&gt;包含继承的方法，如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;deleteByPrimaryKey&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Integer userId&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;User record&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;insertSelective&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;User record&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

    User &lt;span style=&#34;color:#a6e22e&#34;&gt;selectByPrimaryKey&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Integer userId&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;updateByPrimaryKeySelective&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;User record&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;updateByPrimaryKey&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;User record&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;还可以自定义一些方法，我们在上面自定义了一个&lt;code&gt;insertTestModel&lt;/code&gt;方法。&lt;/p&gt;
&lt;h3 id=&#34;service层和控制层&#34;&gt;Service层和控制层&lt;/h3&gt;
&lt;p&gt;本文略过这两层，比较简单，读者可以参见本文对应的源码地址。&lt;/p&gt;
&lt;h3 id=&#34;结果验证&#34;&gt;结果验证&lt;/h3&gt;
&lt;p&gt;我们在插入一条数据之后，查询对应的实体。对应执行的结果也都是成功，可以看到控制台的如下日志信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;c.b.mybatis.dao.TestDao.insertTestModel  : ==&amp;gt;  Preparing: insert into test(id, local_name) values(?, ?)
c.b.mybatis.dao.TestDao.insertTestModel  : ==&amp;gt; Parameters: 5953(Integer), testName(String)
c.b.mybatis.dao.TestDao.insertTestModel  : &amp;lt;==    Updates: 1
c.b.m.dao.TestDao.selectByPrimaryKey     : ==&amp;gt;  Preparing: SELECT id,local_name FROM test WHERE id = ?
c.b.m.dao.TestDao.selectByPrimaryKey     : ==&amp;gt; Parameters: 5953(Integer)
c.b.m.dao.TestDao.selectByPrimaryKey     : &amp;lt;==      Total: 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Spring Boot集成MyBatis实现通用Mapper到此就大功告成。&lt;/p&gt;
&lt;h2 id=&#34;小结&#34;&gt;小结&lt;/h2&gt;
&lt;p&gt;MyBatis是持久层非常常用的组件，Spring Boot倡导约定优于配置，特别是很多xml的配置。当然还有很多同学使用Spring Data。相比而言，我觉得MyBatis的SQL比Spring Data更加灵活，至于具体比较不在此讨论。&lt;/p&gt;
&lt;h4 id=&#34;参考&#34;&gt;参考&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/abel533/Mapper/wiki/4.1.mappergenerator&#34;&gt;abel533/Mapper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/cf43176067d8&#34;&gt;配置Spring Boot集成MyBatis、通用Mapper、Quartz、PageHelper
&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>深入 ThreadLocal</title>
      <link>https://jackiezhongtian.github.io:443/post/threadlocal/</link>
      <pubDate>Fri, 19 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jackiezhongtian.github.io:443/post/threadlocal/</guid>
      
        <description>&lt;p&gt;ThreadLocal主要是提供线程内部的局部变量，在&lt;code&gt;每个&lt;/code&gt;线程内随时随地可取，隔离其他线程。&lt;/p&gt;
&lt;h2 id=&#34;1-threadlocal接口&#34;&gt;1. ThreadLocal接口&lt;/h2&gt;
&lt;h3 id=&#34;11-threadlocal类接口很简单只有4个方法我们先来了解一下&#34;&gt;1.1 ThreadLocal类接口很简单，只有4个方法，我们先来了解一下：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;void set(Object value)&lt;/code&gt;设置当前线程的线程局部变量的值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public Object get()&lt;/code&gt;该方法返回当前线程所对应的线程局部变量。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public void remove()&lt;/code&gt;将当前线程局部变量的值删除，目的是为了减少内存的占用，该方法是JDK 5.0新增的方法。需要指出的是，当线程结束后，对应该线程的局部变量将自动被垃圾回收，所以显式调用该方法清除线程的局部变量并不是必须的操作，但它可以加快内存回收的速度。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;protected Object initialValue()&lt;/code&gt;返回该线程局部变量的初始值，该方法是一个protected的方法，显然是为了让子类覆盖而设计的。这个方法是一个延迟调用方法，在线程第1次调用get()或set(Object)时才执行，并且仅执行1次。ThreadLocal中的缺省实现直接返回一个null。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在同步机制中，通过对象的锁机制保证同一时间只有一个线程访问变量。这时该变量是多个线程共享的，使用同步机制要求程序慎密地分析什么时候对变量进行读写，什么时候需要锁定某个对象，什么时候释放对象锁等繁杂的问题，程序设计和编写难度相对较大。&lt;/p&gt;
&lt;p&gt;而ThreadLocal则从另一个角度来解决多线程的并发访问。ThreadLocal会为每一个线程提供一个独立的变量副本，从而隔离了多个线程对数据的访问冲突。因为每一个线程都拥有自己的变量副本，从而也就没有必要对该变量进行同步了。ThreadLocal提供了线程安全的共享对象，在编写多线程代码时，可以把不安全的变量封装进ThreadLocal。&lt;br&gt;
如果想在get之前不需要调用set就能正常访问的话，必须重写initialValue()方法。最常见的ThreadLocal使用场景为 用来解决 数据库连接、Session管理等。&lt;/p&gt;
&lt;h3 id=&#34;12-使用threadlocal&#34;&gt;1.2 使用ThreadLocal&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ThreadTest&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    ThreadLocal&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Long&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; longLocal &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ThreadLocal&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Long&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;(){&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; Long &lt;span style=&#34;color:#a6e22e&#34;&gt;initialValue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Thread&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;currentThread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;};&lt;/span&gt;
    ThreadLocal&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; stringLocal &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ThreadLocal&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;(){;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;initialValue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Thread&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;currentThread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;};&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        longLocal&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Thread&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;currentThread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
        stringLocal&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Thread&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;currentThread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getLong&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; longLocal&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;getString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; stringLocal&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; InterruptedException &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; ThreadTest test &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ThreadTest&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;


        &lt;span style=&#34;color:#75715e&#34;&gt;//test.set();
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;main.getLong: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; test&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getLong&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;main.getString: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; test&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;


        Thread thread1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Thread&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;//test.set();
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Thread.getLong: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; test&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getLong&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
                System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Thread.getString: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; test&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;};&lt;/span&gt;
        thread1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        thread1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;join&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以上demo覆写了initialValue()方法，或者调用set方法，否则会报空指针异常。在main线程中和thread1线程中，longLocal保存的副本值和stringLocal保存的副本值都不一样。&lt;/p&gt;
&lt;h2 id=&#34;2-threadlocalmap&#34;&gt;2. ThreadLocalMap&lt;/h2&gt;
&lt;p&gt;ThreadLocalMap的Entry继承了WeakReference，并且使用ThreadLocal作为键值。&lt;br&gt;
　　1. 实际的通过ThreadLocal创建的副本是存储在每个线程自己的threadLocals中的；&lt;br&gt;
　　2. 为何threadLocals的类型ThreadLocalMap的键值为ThreadLocal对象，因为每个线程中可有多个threadLocal变量，就像上面代码中的longLocal和stringLocal；&lt;br&gt;
　　3. 在进行get之前，必须先set，否则会报空指针异常；
　&lt;/p&gt;
&lt;h3 id=&#34;21-方法分析&#34;&gt;2.1 方法分析&lt;/h3&gt;
&lt;p&gt;1). JDK8的ThreadLocal的get方法的源码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Returns the value in the current thread&amp;#39;s copy of this
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * thread-local variable.  If the variable has no value for the
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * current thread, it is first initialized to the value returned
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * by an invocation of the {@link #initialValue} method.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @return the current thread&amp;#39;s value of this thread-local
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; T &lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        Thread t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Thread&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;currentThread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        ThreadLocalMap map &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getMap&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;t&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;map &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            ThreadLocalMap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Entry&lt;/span&gt; e &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getEntry&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;e &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#a6e22e&#34;&gt;@SuppressWarnings&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unchecked&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
                T result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;e&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; setInitialValue&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2). getMap&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Get the map associated with a ThreadLocal. Overridden in
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * InheritableThreadLocal.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @param  t the current thread
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @return the map
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    ThreadLocalMap &lt;span style=&#34;color:#a6e22e&#34;&gt;getMap&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Thread t&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; t&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;threadLocals&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;3). setInitialValue&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Variant of set() to establish initialValue. Used instead
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * of set() in case user has overridden the set() method.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * @return the initial value
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; T &lt;span style=&#34;color:#a6e22e&#34;&gt;setInitialValue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        T value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; initialValue&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        Thread t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Thread&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;currentThread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        ThreadLocalMap map &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getMap&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;t&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;map &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
            map&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; value&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
            createMap&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;t&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; value&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; value&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;get方法的流程是这样的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.首先获取当前线程&lt;/li&gt;
&lt;li&gt;2.根据当前线程获取一个Map&lt;/li&gt;
&lt;li&gt;3.如果获取的Map不为空，则在Map中以ThreadLocal的引用作为key来在Map中获取对应的value e，否则转到5&lt;/li&gt;
&lt;li&gt;4.如果e不为null，则返回e.value，否则转到5&lt;/li&gt;
&lt;li&gt;5.Map为空或者e为空，则通过initialValue函数获取初始值value，然后用ThreadLocal的引用和value作为firstKey和firstValue创建一个新的Map&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个Thread维护一个ThreadLocalMap映射表，这个映射表的key是ThreadLocal实例本身，value是真正需要存储的Object。&lt;/p&gt;
&lt;h2 id=&#34;3-weakreference&#34;&gt;3. WeakReference&lt;/h2&gt;
&lt;p&gt;关于内存泄露：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ThreadLocalMap使用ThreadLocal的弱引用作为key，如果一个ThreadLocal没有外部强引用引用他，那么系统gc的时候，这个ThreadLocal势必会被回收，这样一来，ThreadLocalMap中就会出现key为null的Entry，就没有办法访问这些key为null的Entry的value，如果当前线程再迟迟不结束的话，这些key为null的Entry的value就会一直存在一条强引用链：&lt;br&gt;
&lt;code&gt;ThreadLocal Ref -&amp;gt; Thread -&amp;gt; ThreaLocalMap -&amp;gt; Entry -&amp;gt; value&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;主要看下getEntryAfterMiss函数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Entry &lt;span style=&#34;color:#a6e22e&#34;&gt;getEntryAfterMiss&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ThreadLocal&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; key&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Entry e&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            Entry&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; tab &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; table&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tab&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

            &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;e &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                ThreadLocal&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; e&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;k &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; key&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; e&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;k &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
                    expungeStaleEntry&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
                    i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nextIndex&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; len&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
                e &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tab&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ThreadLocalMap的getEntry函数的流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先从ThreadLocal的直接索引位置(通过ThreadLocal.threadLocalHashCode &amp;amp; (len-1)运算得到)获取Entry e，如果e不为null并且key相同则返回e；&lt;/li&gt;
&lt;li&gt;如果e为null或者key不一致则向下一个位置查询，如果下一个位置的key和当前需要查询的key相等，则返回对应的Entry，否则，如果key值为null，则擦除该位置的Entry，否则继续向下一个位置查询&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;在这个过程中遇到的key为null的Entry都会被擦除，那么Entry内的value也就没有强引用链，自然会被回收。仔细研究代码可以发现，set操作也有类似的思想，将key为null的这些Entry都删除，防止内存泄露。 但是光这样还是不够的，上面的设计思路依赖一个前提条件：要调用ThreadLocalMap的genEntry函数或者set函数。这当然是不可能任何情况都成立的，所以很多情况下需要使用者手动调用ThreadLocal的remove函数，手动删除不再需要的ThreadLocal，防止内存泄露。所以JDK建议将ThreadLocal变量定义成private static的，这样的话ThreadLocal的生命周期就更长，由于一直存在ThreadLocal的强引用，所以ThreadLocal也就不会被回收，也就能保证任何时候都能根据ThreadLocal的弱引用访问到Entry的value值，然后remove它，防止内存泄露。&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;参考：
&lt;a href=&#34;https://www.zhihu.com/question/23089780&#34;&gt;ThreadLocal和synchronized的区别&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;http://www.cnblogs.com/dolphin0520/p/3920407.html&#34;&gt;Java并发编程：深入剖析ThreadLocal&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>配置中心 Spring Cloud Config：快速响应失败与重试机制（完结）</title>
      <link>https://jackiezhongtian.github.io:443/post/config-22/</link>
      <pubDate>Mon, 04 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jackiezhongtian.github.io:443/post/config-22/</guid>
      
        <description>&lt;p&gt;开始新的系列文章更新，一起在技术的路上精进！将会介绍Spring Cloud 中提供了分布式配置中心Spring Cloud Config。应用服务中除了实现系统功能的代码，还需要连接资源和其它应用，经常有很多需要在外部配置的数据去调整应用的行为，如切换不同的数据库，设置功能开关等。随着微服务的不断增加，需要系统具备可伸缩和可扩展性，除此之外就是管理相当多的服务实例的配置数据。在应用的开发阶段由各个服务自治，但是到了生产环境之后会给运维带来很大的麻烦，特别是微服务的规模比较大，配置的更新更为麻烦。为此，系统需要建立一个统一的配置管理中心。&lt;/p&gt;
&lt;h3 id=&#34;快速响应失败与重试机制&#34;&gt;快速响应失败与重试机制&lt;/h3&gt;
&lt;h4 id=&#34;快速响应失败&#34;&gt;快速响应失败&lt;/h4&gt;
&lt;p&gt;在某些情况下，当客户端不能连接到Config Server时，可能让服务启动失败更为适合。如果这种行为更为合适，设置启动配置的属性&lt;code&gt;spring.cloud.config.failFast=true&lt;/code&gt;，则客户端会遇到异常而终止。&lt;/p&gt;
&lt;h4 id=&#34;重试机制&#34;&gt;重试机制&lt;/h4&gt;
&lt;p&gt;当客户端应用启动时，config server可能因为网络抖动等问题请求超时造成不可用，我们可以使用重试机制进行不断尝试。当然，这是建立在上面快速响应失败关闭的情况下，我们需要添加如下依赖：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.retry&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-retry&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-aop&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;spring-retry&lt;/code&gt;默认会尝试6次，初始回退间隔为1000ms，后续回退的指数乘数为1.1。我们可以自定义这些配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;cloud&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;config&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;retry&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;max-attempts&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;multiplier&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1.1&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;initial-interval&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;max-interval&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;小结&#34;&gt;小结&lt;/h2&gt;
&lt;p&gt;微服务架构中，每个微服务的业务单位进一步细化，服务经过拆分，微服务的数量变得庞大。当这么多的服务需要测试并上产线，可能会存在多个环境，如集成测试、预发布和产线环境，每个环境的配置文件都会有所区别（如数据源的配置、开关量、路由规则等），如果没有一个集中的配置管理中心，每个环境的配置信息大规模更新就会非常麻烦，工作量大的同时也会容易造成认为的失误。Spring Cloud Config基于云端存储配置信息，它具有中心化，版本控制，支持动态更新，平台独立，语言独立等特性。Spring Cloud Config还是比较容易上手使用，同时也能够满足大部分公司的需求。&lt;/p&gt;
&lt;p&gt;Spring Cloud Config的精妙之处在于它的配置存储于Git，这就天然的把配置的修改、权限、版本等问题隔离在外。通过这个设计使得Spring Cloud Config整体很简单，不过也带来了一些不便之处。笔者认为，Spring Cloud Config的功能可以进一步增加和丰富，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置界面：一个界面管理不同环境、不同集群配置&lt;/li&gt;
&lt;li&gt;实例配置监控：可以方便的看到当前哪些客户端在使用哪些配置&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>配置中心 Spring Cloud Config：应用进阶（下）</title>
      <link>https://jackiezhongtian.github.io:443/post/config-21/</link>
      <pubDate>Sat, 02 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jackiezhongtian.github.io:443/post/config-21/</guid>
      
        <description>&lt;p&gt;开始新的系列文章更新，一起在技术的路上精进！将会介绍Spring Cloud 中提供了分布式配置中心Spring Cloud Config。应用服务中除了实现系统功能的代码，还需要连接资源和其它应用，经常有很多需要在外部配置的数据去调整应用的行为，如切换不同的数据库，设置功能开关等。随着微服务的不断增加，需要系统具备可伸缩和可扩展性，除此之外就是管理相当多的服务实例的配置数据。在应用的开发阶段由各个服务自治，但是到了生产环境之后会给运维带来很大的麻烦，特别是微服务的规模比较大，配置的更新更为麻烦。为此，系统需要建立一个统一的配置管理中心。&lt;/p&gt;
&lt;h3 id=&#34;应用进阶&#34;&gt;应用进阶&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Spring Cloud Config&lt;/code&gt;的基础应用主要包括三大元素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置服务器&lt;/li&gt;
&lt;li&gt;配置客户端&lt;/li&gt;
&lt;li&gt;配置仓库&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现了config client启动时，根据配置的规则，先从config Server拉取其对应的配置信息，然后才会初始化config client的上下文环境。另外还补充了配置的动态刷新和webHook应用于配置刷新。&lt;/p&gt;
&lt;p&gt;其他的功能如模式匹配和对repo、配置仓库的加密解密、属性覆盖、SVN配置（本地）仓库、安全保护等功能，本节重点讲述这部分进阶的功能。&lt;/p&gt;
&lt;h3 id=&#34;安全保护&#34;&gt;安全保护&lt;/h3&gt;
&lt;p&gt;Config Server中还可以配置HTTP Basic安全，拒绝非法用户的配置请求信息。Spring Security结合Spring Boot可以轻松地完成这个需求。使用Spring Boot默认配置的HTTP Basic安全，只需要引入 Spring Security的依赖。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-security&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.5.9.RELEASE&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在Config Server中，增加如下安全的配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:
	&lt;span style=&#34;color:#f92672&#34;&gt;security&lt;/span&gt;:
	  &lt;span style=&#34;color:#f92672&#34;&gt;user&lt;/span&gt;:
	    &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;aoho&lt;/span&gt;
	    &lt;span style=&#34;color:#f92672&#34;&gt;password&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;123456&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时，如果客户端应用直接访问对应的Config Server将会报如下的错误：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Caused by: org.springframework.web.client.HttpClientErrorException: 401 null
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因此，客户端需要增加相应的Credentials信息才能正确获取其对应的配置信息。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;cloud&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;config&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;username&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;aoho&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;password&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;123456&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;完成如上配置，访问配置服务器需要相应的输入用户名和密码，客户端配置好Credentials信息就可以正常访问配置服务器。&lt;/p&gt;
&lt;h3 id=&#34;936-加密解密&#34;&gt;9.3.6 加密解密&lt;/h3&gt;
&lt;p&gt;如果远端配置源包含了加密的内容（以&lt;code&gt;{cipher}&lt;/code&gt;开头），在客户端HTTP请求之前，这些加密了的内容将会先被解密。这样做的好处是，配置仓库中的属性值不再是纯文本。如果一个值不能被解密，将会被移出属性源并且一个额外的属性值将会被加入到该key，只不过加上前缀 &amp;ldquo;invalid.&amp;quot;，表示这个值不可用。这主要是为了防止密码文本被用作密码而意外泄漏。&lt;/p&gt;
&lt;h4 id=&#34;jce环境安装&#34;&gt;JCE环境安装&lt;/h4&gt;
&lt;p&gt;默认情况下我们的JRE中自带了JCE(Java Cryptography Extension)，但是默认是一个有限长度的版本，我们这里需要一个不限长度的JCE，从Oracle官网下载（如jce8，http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html）。下载之后，解压的目录结构如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.
├── README.txt
├── US_export_policy.jar
└── local_policy.jar
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上述链接下载解压后拷贝到 JDK/jre/lib/security 目录下覆盖文件。&lt;/p&gt;
&lt;h4 id=&#34;对称加密与解密&#34;&gt;对称加密与解密&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;所谓对称，就是采用这种加密方法的双方使用方式用同样的密钥进行加密和解密。密钥是控制加密及解密过程的指令。算法是一组规则，规定如何进行加密和解密。加密的安全性不仅取决于加密算法本身，密钥管理的安全性更是重要。因为加密和解密都使用同一个密钥，如何把密钥安全地传递到解密者手上就成了必须要解决的问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对称加解密方式比较简单，从定义可以知道，我们需要配置一个密钥。在 Config Server中配置一个秘钥如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;encrypt&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;secret&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;启动Config Server，通过其提供的多个端点进行验证我们的配置是否正确，加密解密是否能够生效。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/encrypt/status端点验证Encryptor的安装状态。如&lt;code&gt;curl -i &amp;quot;http://localhost:8888/encrypt/status&amp;quot; &lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;/encrypt端点提供了对字符串进行加密的功能，返回密文。如&lt;code&gt;curl -X POST  -d &amp;quot;user&amp;quot;  &amp;quot;http://localhost:8888/encrypt/&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;/decrypt端点提供了对加密后的密文进行解密的供，返回明文。如&lt;code&gt;curl -X POST  -d &amp;quot;9f034a63c87496b19f86ab80b4cb0b2f463d116cbb172df0b85286a179e3afb3&amp;quot;  &amp;quot;http://localhost:8888/decrypt/&amp;quot; &lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过将需要加密的字符串进行替换，并加上前缀&lt;code&gt;{cipher}&lt;/code&gt;,Config Server在获取到这个值之后会先对值进行解密，解密之后才会返回给客户端使用。&lt;/p&gt;
&lt;h4 id=&#34;非对称加密与解密&#34;&gt;非对称加密与解密&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;非对称加密算法需要两个密钥：公开密钥和私有密钥。公开密钥与私有密钥是一对，如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密；如果用私有密钥对数据进行加密，那么只有用对应的公开密钥才能解密。因为加密和解密使用的是两个不同的密钥，所以这种算法叫作非对称加密算法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;相比于对称加密算法，非对称加密算法更加安全。使用非对称加密，我么需要生成密钥对，jdk中自带了keytool工具，执行如下命令：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;keytool -genkeypair -alias config-server -keyalg RSA -keystore config-server.keystore&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;注意的是，设置秘钥口令，长度不能小于6。执行完成之后，会在当前目录生成一个文件server.keystore，拷贝到我们的Config Server中的src\main\resources目录下，Config Server进行如下配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;encrypt&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;key-store&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;location&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;config-server.keystore&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;alias&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;config-server&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;password&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;123456&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;secret&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;123456&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以使用上面对称算法中列出的端点同样进行验证，比如执行 &lt;code&gt;curl -X POST  -d &amp;quot;user&amp;quot;  &amp;quot;http://localhost:8888/encrypt/&amp;quot;&lt;/code&gt;，得到的结果明显更加复杂了：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AQAZL4yLLYh0CAEQKMPkg5WRvjb7Urz+7F2aeruGyG9WYCgKa1/D39DNmzrPgKmoBvCrUJT1a/O/ft8MY8d1qB8qtlG86wOhopaoiFih1kLxMnqXNH/Q4/fI/b4muOBS+OF0ChodLPUjCtwTUN6KT6ZN/9fkrFI6PCiUrHd8AZBX80LtpCoy4Ws6C20j/0Fpie6UPOn4Tdpzx1sHkFG/8itcJnWqOaNdM6FpOlKElOOIYbVdeGtEbrZ0av3xEKUPmBdkFRTwM/7VwdIcPr1qwmsBGLYLVBVHZ0YfVUJpPgBEmaVD7b9WVMP/eyEInvaSCB75qGWaqc1UVbKtS9U7KTL2lmmlr1P9TMfobsG8vwHINfv+PKeOmfcoy47va/NkqHU
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>配置中心 Spring Cloud Config：应用进阶（中）</title>
      <link>https://jackiezhongtian.github.io:443/post/config-20/</link>
      <pubDate>Wed, 30 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jackiezhongtian.github.io:443/post/config-20/</guid>
      
        <description>&lt;p&gt;开始新的系列文章更新，一起在技术的路上精进！将会介绍Spring Cloud 中提供了分布式配置中心Spring Cloud Config。应用服务中除了实现系统功能的代码，还需要连接资源和其它应用，经常有很多需要在外部配置的数据去调整应用的行为，如切换不同的数据库，设置功能开关等。随着微服务的不断增加，需要系统具备可伸缩和可扩展性，除此之外就是管理相当多的服务实例的配置数据。在应用的开发阶段由各个服务自治，但是到了生产环境之后会给运维带来很大的麻烦，特别是微服务的规模比较大，配置的更新更为麻烦。为此，系统需要建立一个统一的配置管理中心。&lt;/p&gt;
&lt;h3 id=&#34;应用进阶&#34;&gt;应用进阶&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Spring Cloud Config&lt;/code&gt;的基础应用主要包括三大元素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置服务器&lt;/li&gt;
&lt;li&gt;配置客户端&lt;/li&gt;
&lt;li&gt;配置仓库&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现了config client启动时，根据配置的规则，先从config Server拉取其对应的配置信息，然后才会初始化config client的上下文环境。另外还补充了配置的动态刷新和webHook应用于配置刷新。&lt;/p&gt;
&lt;p&gt;其他的功能如模式匹配和对repo、配置仓库的加密解密、属性覆盖、SVN配置（本地）仓库、安全保护等功能，本节重点讲述这部分进阶的功能。&lt;/p&gt;
&lt;h3 id=&#34;使用svn或本地文件系统作为配置仓库&#34;&gt;使用SVN或本地文件系统作为配置仓库&lt;/h3&gt;
&lt;p&gt;我们在基础应用中使用了比较主流的git作为配置仓库，这一小节介绍下SVN仓库和本地文件系统作为仓库的使用方式。&lt;/p&gt;
&lt;h4 id=&#34;svn&#34;&gt;SVN&lt;/h4&gt;
&lt;p&gt;config Server中的pom 文件增加如下依赖：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.tmatesoft.svnkit&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;svnkit&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.8.12&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;bootstrap.yml中关于config Server的配置如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;cloud&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;config&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;server&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;svn&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;uri&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;svn://localhost:443/keets/config-repo&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;username&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;user&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;password&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;pwd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;config Server启动时的 &amp;ldquo;spring.profiles.active“ 指定为“svn”，这样configServer就切换到了SVN上面了。关于SVN方式的其他功能，我们在此不做扩展了，读者可以自行查阅文档。&lt;/p&gt;
&lt;h4 id=&#34;本地文件系统&#34;&gt;本地文件系统&lt;/h4&gt;
&lt;p&gt;如果你不使用git、SVN，Config Server还提供了本地文件系统，对应于“native”的profile。从本地的类路径或者文件加载配置文件。使用“spring.cloud.config.server.native.searchLocations”配置任何你想指向的静态路径。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;profiles&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;active&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;native&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;cloud&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;config&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;server&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;native&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;searchLocations&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;file:/Users/user/Documents/config-repo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;需要注意的是，资源文件的路径前需要加上&lt;code&gt;file:&lt;/code&gt;前缀，默认classpath路径中通常没有前缀。Spring Boot 应用中还可以使用环境的占位符&lt;code&gt;${user.home}&lt;/code&gt;，另外在Windows中绝对路径需要额外的&lt;code&gt;/&lt;/code&gt;，如&lt;code&gt; file:///${user.home}/config-repo&lt;/code&gt;。&lt;code&gt;searchLocations&lt;/code&gt;默认值与Spring Boot应用的类路径（如&lt;code&gt;[classpath:/, classpath:/config, file:./, file:./config]&lt;/code&gt;）。这不会将&lt;code&gt;application.properties&lt;/code&gt;从服务器公开到所有客户端，因为服务器中存在的任何属性源在发送到客户端之前都被删除。&lt;/p&gt;
&lt;p&gt;搜索路径可以包含&lt;code&gt;{application}&lt;/code&gt;, &lt;code&gt;{profile}&lt;/code&gt; 和 &lt;code&gt;{label}&lt;/code&gt;占位符，这样就可以在路径中分个目录，然后选择易懂的区分策略。&lt;/p&gt;
&lt;p&gt;如果搜索路径中不使用占位符，config Server在实现时在搜索路径HTTP资源后面自动追加&lt;code&gt;{label}&lt;/code&gt;参数，属性文件从每个搜索位置和一个与标签具有相同名称的子目录中加载（在Spring环境中标记的属性优先）。因此，没有占位符的默认行为与添加一个搜索路径以&lt;code&gt;/{label}/&lt;/code&gt;结尾是相同的效果，如配置的搜索路径&lt;code&gt;file:/tmp/config&lt;/code&gt; 与&lt;code&gt;file:/tmp/config,file:/tmp/config/{label}&lt;/code&gt;其实是相同的。当然，这种默认的行为可以通过设置&lt;code&gt;spring.cloud.config.server.native.addLabelLocations=false&lt;/code&gt;来阻止。&lt;/p&gt;
&lt;h3 id=&#34;属性覆盖&#34;&gt;属性覆盖&lt;/h3&gt;
&lt;p&gt;Config Server有一个属性覆盖&lt;code&gt;overrides&lt;/code&gt;特性，允许将配置的属性强制应用到所有的应用服务，而且不能被使用普通的Spring Boot钩子的应用程序意外地改变。声明属性覆盖，是一种map的格式，在&lt;code&gt;spring.cloud.config.server.overrides&lt;/code&gt;后面增加key-value，如下面的配置所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;cloud&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;config&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;server&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;overrides&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;cloud&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Edgware.RELEASE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这将会使得所有的配置客户端独立于自己的配置读取&lt;code&gt;cloud: Edgware.RELEASE&lt;/code&gt;。当然，应用程序可以以任何方式使用Config Server中的数据，这种情况下覆盖不可执行，但是如果它们是Spring Cloud Config客户端，上述配置是有效的。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>配置中心 Spring Cloud Config：应用进阶（上）</title>
      <link>https://jackiezhongtian.github.io:443/post/config-19/</link>
      <pubDate>Tue, 29 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jackiezhongtian.github.io:443/post/config-19/</guid>
      
        <description>&lt;p&gt;开始新的系列文章更新，一起在技术的路上精进！将会介绍Spring Cloud 中提供了分布式配置中心Spring Cloud Config。应用服务中除了实现系统功能的代码，还需要连接资源和其它应用，经常有很多需要在外部配置的数据去调整应用的行为，如切换不同的数据库，设置功能开关等。随着微服务的不断增加，需要系统具备可伸缩和可扩展性，除此之外就是管理相当多的服务实例的配置数据。在应用的开发阶段由各个服务自治，但是到了生产环境之后会给运维带来很大的麻烦，特别是微服务的规模比较大，配置的更新更为麻烦。为此，系统需要建立一个统一的配置管理中心。&lt;/p&gt;
&lt;h2 id=&#34;应用进阶&#34;&gt;应用进阶&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Spring Cloud Config&lt;/code&gt;的基础应用主要包括三大元素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置服务器&lt;/li&gt;
&lt;li&gt;配置客户端&lt;/li&gt;
&lt;li&gt;配置仓库&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现了config client启动时，根据配置的规则，先从config Server拉取其对应的配置信息，然后才会初始化config client的上下文环境。另外还补充了配置的动态刷新和webHook应用于配置刷新。&lt;br&gt;
其他的功能如模式匹配和对repo、配置仓库的加密解密、属性覆盖、SVN配置（本地）仓库、安全保护等功能，本节重点讲述这部分进阶的功能。&lt;/p&gt;
&lt;h3 id=&#34;为config-server配置多个repo&#34;&gt;为config Server配置多个repo&lt;/h3&gt;
&lt;p&gt;之前的例子中，我们配置config server的git repo信息如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring.cloud.config.server.git.uri&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;https://gitee.com/keets/Config-Repo.git&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它也支持更复杂的需求，通过应用名application与profile进行模式匹配。模式格式是带有通配符的&lt;code&gt;{application}/{profile}&lt;/code&gt;名称的逗号分隔列表（其中可能需要引用以通配符开头的模式）。&lt;/p&gt;
&lt;p&gt;repo中的&lt;code&gt;pattern&lt;/code&gt;属性是一个数组，因此可以使用一个YAML数组来绑定多个patterns。当我们想要运行应用的多个profiles时，需要这样做。Spring Cloud将会猜测，当一个pattern包含一个不以&lt;code&gt;*&lt;/code&gt;结尾的profile，暗示了你实际是想要匹配以该pattern开头的profiles。这很正常，比如我们可能需要在本地运行&lt;code&gt;development&lt;/code&gt;的profile，然而在远端运行&lt;code&gt;cloud&lt;/code&gt;的profile。&lt;/p&gt;
&lt;p&gt;默认情况下，config server只有配置在第一次请求时才会从远端clone。config server可以设置成，在启动时从远端仓库clone。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;cloud&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;config&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;server&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;git&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;uri&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;https://github.com/spring-cloud-samples/config-repo&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;repos&lt;/span&gt;:
			  &lt;span style=&#34;color:#f92672&#34;&gt;simple&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;https://github.com/simple/config-repo          &lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;development&lt;/span&gt;:
              &lt;span style=&#34;color:#f92672&#34;&gt;pattern&lt;/span&gt;:
                - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;*/development&amp;#39;&lt;/span&gt;
                - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;*/staging&amp;#39;&lt;/span&gt;
              &lt;span style=&#34;color:#f92672&#34;&gt;uri&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;https://github.com/development/config-repo&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;staging&lt;/span&gt;:
              &lt;span style=&#34;color:#f92672&#34;&gt;pattern&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;staging*&lt;/span&gt;
              &lt;span style=&#34;color:#f92672&#34;&gt;cloneOnStart&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
              &lt;span style=&#34;color:#f92672&#34;&gt;uri&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;https://github.com/staging/config-repo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如上的配置方式，repos配置了多个仓库：simple、development和staging，通过三个不同的repos配置方式，讲解多个repos的模式匹配。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;simple仓库：匹配的模式是&lt;code&gt;simple/*&lt;/code&gt;，意为只匹配应用名为simple的所有profiles。simple中使用的快捷配置方式，只能用于设置URI的地址，如要设置其他信息（credentials或模式等），则必须要使用完整的形式。&lt;/li&gt;
&lt;li&gt;development仓库：&lt;code&gt;*/staging&lt;/code&gt; 是 &lt;code&gt;[&amp;quot;*/staging&amp;quot;, &amp;quot;*/staging,*&amp;quot;]&lt;/code&gt;的简写，匹配staging开头的profile的应用。同理，&lt;code&gt;*/development&lt;/code&gt;匹配所有以development开头的profile的应用。&lt;/li&gt;
&lt;li&gt;staging：pattern对应于&lt;code&gt;staging*&lt;/code&gt;，staging repo匹配了所有的以staging开头应用名，并且不限profile。&lt;code&gt;/*&lt;/code&gt;后缀会自动添加到没有profile匹配的任何模式。并开启了config Server即clone该仓库到本地。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;客户端覆写远端的配置属性&#34;&gt;客户端覆写远端的配置属性&lt;/h3&gt;
&lt;p&gt;应用的配置源通常都是远端的Config Server服务器，默认情况下，本地的配置优先级低于远端配置仓库。如果想实现本地应用的系统变量和config文件覆盖远端仓库中的属性值，可以通过如下设置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;cloud&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;config&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;allowOverride&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;overrideNone&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;overrideSystemProperties&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;overrideNone：当allowOverride为true时，overrideNone设置为true，外部的配置优先级更低，而且不能覆盖任何存在的属性源。默认为false&lt;/li&gt;
&lt;li&gt;allowOverride：标识overrideSystemProperties属性是否启用。默认为true，设置为false意为禁止用户的设置&lt;/li&gt;
&lt;li&gt;overrideSystemProperties：用来标识外部配置是否能够覆盖系统属性，默认为true&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;客户端服务通过如上配置，可以实现本地配置优先级更高，且不能被远端仓库中的配置覆盖。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>配置中心 Spring Cloud Config：ConfigServerInstanceProvider与EventListener</title>
      <link>https://jackiezhongtian.github.io:443/post/config-18/</link>
      <pubDate>Mon, 28 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jackiezhongtian.github.io:443/post/config-18/</guid>
      
        <description>&lt;p&gt;开始新的系列文章更新，一起在技术的路上精进！将会介绍Spring Cloud 中提供了分布式配置中心Spring Cloud Config。应用服务中除了实现系统功能的代码，还需要连接资源和其它应用，经常有很多需要在外部配置的数据去调整应用的行为，如切换不同的数据库，设置功能开关等。随着微服务的不断增加，需要系统具备可伸缩和可扩展性，除此之外就是管理相当多的服务实例的配置数据。在应用的开发阶段由各个服务自治，但是到了生产环境之后会给运维带来很大的麻烦，特别是微服务的规模比较大，配置的更新更为麻烦。为此，系统需要建立一个统一的配置管理中心。&lt;/p&gt;
&lt;h4 id=&#34;configserverinstanceprovider&#34;&gt;ConfigServerInstanceProvider&lt;/h4&gt;
&lt;p&gt;从上面的&lt;code&gt;ConfigServerInstanceProvider&lt;/code&gt;构造方式看出，实例化&lt;code&gt;ConfigServerInstanceProvider&lt;/code&gt;需要服务发现的客户端&lt;code&gt;DiscoveryClient&lt;/code&gt;。其提供的主要方法&lt;code&gt;getConfigServerInstance&lt;/code&gt;，通过传入的serviceId参数，获取对应的服务实例。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ConfigServerInstanceProvider&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ConfigServerInstanceProvider&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;DiscoveryClient client&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; client&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color:#a6e22e&#34;&gt;@Retryable&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;interceptor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;configServerRetryInterceptor&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; ServiceInstance &lt;span style=&#34;color:#a6e22e&#34;&gt;getConfigServerInstance&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String serviceId&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		logger&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;debug&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Locating configserver (&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; serviceId &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;) via discovery&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ServiceInstance&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; instances &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getInstances&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;serviceId&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;instances&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalStateException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
					&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No instances found of configserver (&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; serviceId &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
		ServiceInstance instance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; instances&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; instance&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上述代码实现逻辑很清晰，主要依赖于前面的 &lt;code&gt;DiscoveryClientConfigServiceBootstrapConfiguration&lt;/code&gt; 注入的对象&lt;code&gt;DiscoveryClient&lt;/code&gt;，通过client获取对应serviceId的实例。&lt;/p&gt;
&lt;h4 id=&#34;eventlistener&#34;&gt;EventListener&lt;/h4&gt;
&lt;p&gt;下面我们看一下上面配置的两个事件监听器：环境上下文刷新和心跳事件。&lt;/p&gt;
&lt;p&gt;环境上下文刷新事件，&lt;code&gt;ContextRefreshedEvent&lt;/code&gt;的父类继承自抽象类&lt;code&gt;ApplicationEvent&lt;/code&gt;，当&lt;code&gt;ApplicationContext&lt;/code&gt;被初始化或者刷新时会唤起该事件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ContextRefreshedEvent&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; ApplicationContextEvent &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	 &lt;span style=&#34;color:#75715e&#34;&gt;// 创建了一个新的上下文刷新事件，参数是初始化了的ApplicationContext
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ContextRefreshedEvent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ApplicationContext source&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;source&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;心跳事件定义在discovery client中，如果支持来自discovery server心跳，DiscoveryClient的实现能够广播。提供给监听器一个基本的服务目录状态变更的指示。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HeartbeatEvent&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; ApplicationEvent &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; Object state&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HeartbeatEvent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Object source&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Object state&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;source&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;state&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; state&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Object &lt;span style=&#34;color:#a6e22e&#34;&gt;getValue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;state&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;创建一个新的事件，参数通常为discovery client和状态值，连个参数都不依赖于具体的内容和格式&lt;/li&gt;
&lt;li&gt;代表服务目录的状态值。唯一的需求当目录更新了，该状态值也需要更新，如同一个版本计数器一样简单。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;介绍完这两个事件，我们发现他们的监听器都依赖于&lt;code&gt;refresh()&lt;/code&gt;方法，下面我们具体看下其实现的功能。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;refresh&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
			String serviceId &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getDiscovery&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getServiceId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			ServiceInstance server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;instanceProvider&lt;/span&gt;
					&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getConfigServerInstance&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;serviceId&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
			String url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getHomePage&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;server&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getMetadata&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;containsKey&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;				String user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getMetadata&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
				user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; user &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; user&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setUsername&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;user&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 3
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;				String password &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getMetadata&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setPassword&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;password&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
			&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getMetadata&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;containsKey&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;configPath&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
				String path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getMetadata&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;configPath&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 4
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;url&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;endsWith&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;startsWith&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
					url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; url&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;substring&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; url&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
				&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
				url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; url &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; path&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
			&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setUri&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;url&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;获取serviceId的服务实例&lt;/li&gt;
&lt;li&gt;刷新获取到的服务实例的元数据信息&lt;/li&gt;
&lt;li&gt;更新用户名、密码&lt;/li&gt;
&lt;li&gt;更新configPath&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;refresh()&lt;/code&gt;方法其实根据上下文环境和心跳事件，进行刷新服务实例&lt;code&gt;ConfigClientProperties&lt;/code&gt;中的云数据信息，包括配置的用户名、密码和configPath。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>配置中心 Spring Cloud Config：通过HTTP URI指定Config Server</title>
      <link>https://jackiezhongtian.github.io:443/post/config-17/</link>
      <pubDate>Thu, 24 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jackiezhongtian.github.io:443/post/config-17/</guid>
      
        <description>&lt;p&gt;开始新的系列文章更新，一起在技术的路上精进！将会介绍Spring Cloud 中提供了分布式配置中心Spring Cloud Config。应用服务中除了实现系统功能的代码，还需要连接资源和其它应用，经常有很多需要在外部配置的数据去调整应用的行为，如切换不同的数据库，设置功能开关等。随着微服务的不断增加，需要系统具备可伸缩和可扩展性，除此之外就是管理相当多的服务实例的配置数据。在应用的开发阶段由各个服务自治，但是到了生产环境之后会给运维带来很大的麻烦，特别是微服务的规模比较大，配置的更新更为麻烦。为此，系统需要建立一个统一的配置管理中心。&lt;/p&gt;
&lt;h3 id=&#34;通过http-uri指定config-server&#34;&gt;通过HTTP URI指定Config Server&lt;/h3&gt;
&lt;p&gt;重试注解指定了拦截器的配置&lt;code&gt;configServerRetryInterceptor&lt;/code&gt;，这对象的初始化，在前面已经讲过。&lt;code&gt;ConfigServicePropertySourceLocator&lt;/code&gt;实质是一个属性资源定位器，其主要方法是&lt;code&gt;#locate(Environment environment)&lt;/code&gt;。首先用当前运行应用的环境的application、profile和label替换configClientProperties中的占位符并初始化RestTemplate，然后遍历labels数组直到获取到有效的配置信息，最后还会根据是否快速失败进行重试。主要流程图如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jackiezhongtian.github.io:443/img/config/locatorconfig.jpg&#34; alt=&#34;locate&#34; title=&#34;locate处理流程&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#locate(Environment environment)&lt;/code&gt;调用&lt;code&gt;#getRemoteEnvironment&lt;/code&gt;方法通过http的方式获取远程服务器上的配置数据。实现过程为，首先替换请求路径path中占位符，然后进行头部headers组装，组装好了就可以发送请求，最后返回结果。
在上面的实现中，我们看到获取到的配置信息存放在&lt;code&gt;CompositePropertySource&lt;/code&gt;，那是如何使用它的呢？这边补充另一个重要的类是PropertySourceBootstrapConfiguration，它实现了ApplicationContextInitializer接口，该接口会在应用上下文刷新之前&lt;code&gt;refresh()&lt;/code&gt;被回调，从而执行初始化操作，应用启动后的调用栈如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SpringApplicationBuilder.run() -&amp;gt; SpringApplication.run() -&amp;gt; SpringApplication.createAndRefreshContext() -&amp;gt; SpringApplication.applyInitializers() -&amp;gt; PropertySourceBootstrapConfiguration.initialize()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而上述&lt;code&gt;ConfigServicePropertySourceLocator&lt;/code&gt;的locate方法会在&lt;code&gt;PropertySourceBootstrapConfiguration.#initialize&lt;/code&gt;中被调用，从而保证上下文在刷新之前能够拿到必要的配置信息。具体看一下initialize方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PropertySourceBootstrapConfiguration&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt;
		ApplicationContextInitializer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ConfigurableApplicationContext&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;,&lt;/span&gt; Ordered &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

	&lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ConfigurableApplicationContext applicationContext&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		CompositePropertySource composite &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CompositePropertySource&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
				BOOTSTRAP_PROPERTY_SOURCE_NAME&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		AnnotationAwareOrderComparator&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sort&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;propertySourceLocators&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; empty &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
		ConfigurableEnvironment environment &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; applicationContext&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getEnvironment&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;PropertySourceLocator locator &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;propertySourceLocators&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
			PropertySource&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; source &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
			source &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; locator&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;locate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;environment&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;source &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
			&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
			composite&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;addPropertySource&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;source&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
			empty &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(!&lt;/span&gt;empty&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
			MutablePropertySources propertySources &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; environment&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getPropertySources&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
			String logConfig &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; environment&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;resolvePlaceholders&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${logging.config:}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
			LogFile logFile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; LogFile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;environment&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;propertySources&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;contains&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;BOOTSTRAP_PROPERTY_SOURCE_NAME&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
				propertySources&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;remove&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;BOOTSTRAP_PROPERTY_SOURCE_NAME&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
			&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
			insertPropertySources&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;propertySources&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; composite&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
			reinitializeLoggingSystem&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;environment&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; logConfig&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; logFile&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
			setLogLevels&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;environment&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
			handleIncludedProfiles&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;environment&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下面我们看一下，在&lt;code&gt;initialize&lt;/code&gt;方法中进行了哪些操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据默认的 AnnotationAwareOrderComparator 排序规则对propertySourceLocators数组进行排序&lt;/li&gt;
&lt;li&gt;获取运行的环境上下文ConfigurableEnvironment&lt;/li&gt;
&lt;li&gt;遍历propertySourceLocators时
&lt;ul&gt;
&lt;li&gt;调用 locate 方法，传入获取的上下文environment&lt;/li&gt;
&lt;li&gt;将source添加到PropertySource的链表中&lt;/li&gt;
&lt;li&gt;设置source是否为空的标识标量empty&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;source不为空的情况，才会设置到environment中
&lt;ul&gt;
&lt;li&gt;返回Environment的可变形式，可进行的操作如addFirst、addLast&lt;/li&gt;
&lt;li&gt;移除propertySources中的bootstrapProperties&lt;/li&gt;
&lt;li&gt;根据config server覆写的规则，设置propertySources&lt;/li&gt;
&lt;li&gt;处理多个active profiles的配置信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如上过程，即可将从指定的Config Server	 拉取的配置信息应用到我们的客户端服务中。&lt;/p&gt;
&lt;h4 id=&#34;通过服务发现指定config-server&#34;&gt;通过服务发现指定Config Server&lt;/h4&gt;
&lt;p&gt;通过服务发现指定Config Server，Config Client在启动时，首先会通过服务发现找到Config Server，然后从Config Server拉取其相应的配置信息，并用这些远端的属性资源初始化好Spring的环境。&lt;br&gt;
如果你使用了服务发现组件，如Eureka 、Spring Cloud Consul，需要设置 &lt;code&gt;spring.cloud.config.discovery.enabled=true&lt;/code&gt; ，因为默认的是HTTP URI的方式，导致客户端应用不能利用服务注册。&lt;br&gt;
所有的客户端应用需要配置正确的服务发现信息。比如使用Spring Cloud Netflix，你需要指定Eureka服务器的地址&lt;code&gt;eureka.client.serviceUrl.defaultZone&lt;/code&gt;。在启动时定位服务注册，这样做的开销是需要额外的网络请求。优点是Config Server实现高可用，避免单点故障。
配置的Config Server，默认serviceId是&amp;quot;configserver&amp;quot;，我们可以通过在客户端中的&lt;code&gt;spring.cloud.config.discovery.serviceId&lt;/code&gt;属性来更改（通常在Config Server中通过spring.application.name配置一个服务）。服务发现的客户端实现支持多种类型的metadata map，比如Eureka的 &lt;code&gt;eureka.instance.metadataMap&lt;/code&gt;。Config Server的一些额外属性，需要配置在服务注册的元数据中，这样客户端才能正确连接。如果Config Server使用了基本的HTTP安全，我们可以配置证书的用户名和密码；或者是Config Server有一个上下文路径，我们可以设置 &amp;ldquo;configPath&amp;rdquo;。客户端关于config信息可以配置如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;eureka&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;instance&lt;/span&gt;:
    &lt;span style=&#34;color:#ae81ff&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;metadataMap&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;user&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;osufhalskjrtl&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;password&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;lviuhlszvaorhvlo5847&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;configPath&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/config&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下面我们看一下&lt;code&gt;DiscoveryClientConfigServiceBootstrapConfiguration&lt;/code&gt;中配置了哪些启动前的上下文。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@ConditionalOnProperty&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spring.cloud.config.discovery.enabled&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; matchIfMissing &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@Configuration&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@Import&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;({&lt;/span&gt; UtilAutoConfiguration&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;})&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@EnableDiscoveryClient&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DiscoveryClientConfigServiceBootstrapConfiguration&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

	&lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; ConfigServerInstanceProvider &lt;span style=&#34;color:#a6e22e&#34;&gt;configServerInstanceProvider&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
			DiscoveryClient discoveryClient&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ConfigServerInstanceProvider&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;discoveryClient&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color:#a6e22e&#34;&gt;@EventListener&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ContextRefreshedEvent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;startup&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ContextRefreshedEvent event&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		refresh&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color:#a6e22e&#34;&gt;@EventListener&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;HeartbeatEvent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;heartbeat&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;HeartbeatEvent event&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;monitor&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;event&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getValue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
			refresh&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;主要配置了config client通过服务发现组件寻找config server服务，还配置了两种事件的监听器：上下文刷新事件和心跳事件。在获取到Config Server中的配置信息之后，剩余的过程与指定HTTP URI方式获取Config Server是一样的，在上一小节已经讲解。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>配置中心 Spring Cloud Config：Config Client详解</title>
      <link>https://jackiezhongtian.github.io:443/post/config-16/</link>
      <pubDate>Tue, 22 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jackiezhongtian.github.io:443/post/config-16/</guid>
      
        <description>&lt;p&gt;开始新的系列文章更新，一起在技术的路上精进！将会介绍Spring Cloud 中提供了分布式配置中心Spring Cloud Config。应用服务中除了实现系统功能的代码，还需要连接资源和其它应用，经常有很多需要在外部配置的数据去调整应用的行为，如切换不同的数据库，设置功能开关等。随着微服务的不断增加，需要系统具备可伸缩和可扩展性，除此之外就是管理相当多的服务实例的配置数据。在应用的开发阶段由各个服务自治，但是到了生产环境之后会给运维带来很大的麻烦，特别是微服务的规模比较大，配置的更新更为麻烦。为此，系统需要建立一个统一的配置管理中心。&lt;/p&gt;
&lt;h3 id=&#34;config-client&#34;&gt;Config Client&lt;/h3&gt;
&lt;p&gt;Spring Boot的应用能够立刻体验Spring Cloud Config Server带来的优势，而且还能够意外收获与环境变化事件有关的特性。当我们在pom中添加了spring-cloud-config-client依赖，即可对Spring Cloud Config进行初始化配置。客户端应用在启动时有两种配置方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过HTTP URI指定Config Server&lt;/li&gt;
&lt;li&gt;通过服务发现指定Config Server&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;与之相关的配置类为spring.factories文件中定义的启动上下文：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;# Bootstrap components
org.springframework.cloud.bootstrap.BootstrapConfiguration=\
org.springframework.cloud.config.client.ConfigServiceBootstrapConfiguration,\
org.springframework.cloud.config.client.DiscoveryClientConfigServiceBootstrapConfiguration
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;配置客户端应用在引入&lt;code&gt;spring-cloud-starter-config&lt;/code&gt; 依赖后，使得其配置的Bean都会在SpingApplicatin启动前加入到它的上下文里去。下面我们分别介绍这两种启动方式。&lt;/p&gt;
&lt;h4 id=&#34;通过http-uri指定config-server&#34;&gt;通过HTTP URI指定Config Server&lt;/h4&gt;
&lt;p&gt;通过HTTP URI指定Config Server，是每一个客户端应用默认的启动方式，当config client启动时，通过 &lt;code&gt;spring.cloud.config.uri&lt;/code&gt;（如果不配置，默认是&amp;quot;http://localhost:8888&amp;quot;）属性绑定到Config Server，并利用获取到的远端环境属性初始化好Spring的环境。&lt;/p&gt;
&lt;p&gt;结果是，所有想要获取Config Server中的配置信息的客户端应用，都需要在环境变量中配置&lt;code&gt;spring.cloud.config.uri&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Configuration&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@EnableConfigurationProperties&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ConfigServiceBootstrapConfiguration&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

	&lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; ConfigClientProperties &lt;span style=&#34;color:#a6e22e&#34;&gt;configClientProperties&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		ConfigClientProperties client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ConfigClientProperties&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;environment&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; client&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;@ConditionalOnMissingBean&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ConfigServicePropertySourceLocator&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;@ConditionalOnProperty&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spring.cloud.config.enabled&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; matchIfMissing &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; ConfigServicePropertySourceLocator &lt;span style=&#34;color:#a6e22e&#34;&gt;configServicePropertySource&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ConfigClientProperties properties&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		ConfigServicePropertySourceLocator locator &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ConfigServicePropertySourceLocator&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
				properties&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; locator&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color:#75715e&#34;&gt;//...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;ConfigServiceBootstrapConfiguration&lt;/code&gt;配置了两个bean的初始化，分别为&lt;code&gt;ConfigClientProperties&lt;/code&gt;和&lt;code&gt;ConfigServicePropertySourceLocator&lt;/code&gt;。&lt;code&gt;ConfigClientProperties&lt;/code&gt;是对ConfigClient的属性进行配置，而&lt;code&gt;ConfigServicePropertySourceLocator&lt;/code&gt;用于从远程服务器上请求我们的配置，并注册到 Spring 容器中的&lt;code&gt;Environment&lt;/code&gt;对象中。
在Bootstrap配置类中，还有对于retry拦截器的初始化配置，引入&lt;code&gt;spring-retry&lt;/code&gt;的依赖，下面是对于retry拦截器的配置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;@ConditionalOnProperty&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spring.cloud.config.failFast&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;@ConditionalOnClass&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;({&lt;/span&gt; Retryable&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Aspect&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; AopAutoConfiguration&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;})&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;@Configuration&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;@EnableRetry&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;proxyTargetClass &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;@Import&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;AopAutoConfiguration&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;@EnableConfigurationProperties&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;RetryProperties&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RetryConfiguration&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

		&lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;@ConditionalOnMissingBean&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;configServerRetryInterceptor&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; RetryOperationsInterceptor &lt;span style=&#34;color:#a6e22e&#34;&gt;configServerRetryInterceptor&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
				RetryProperties properties&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; RetryInterceptorBuilder
					&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stateless&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
					&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;backOffOptions&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;properties&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getInitialInterval&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt;
							properties&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getMultiplier&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt; properties&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getMaxInterval&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt;
					&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;maxAttempts&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;properties&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getMaxAttempts&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当&lt;code&gt;spring.cloud.config.failFast&lt;/code&gt;的值为true，且引入了retry和aop的依赖，则会初始化&lt;code&gt;RetryConfiguration&lt;/code&gt;类。在该类中注册了Bean名为&lt;code&gt;configServerRetryInterceptor&lt;/code&gt;的&lt;code&gt;RetryOperationsInterceptor&lt;/code&gt;，如果不设置，将会使用&lt;code&gt;RetryProperties&lt;/code&gt;默认属性值。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ConfigClientProperties&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;//配置的前缀
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; String PREFIX &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spring.cloud.config&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;//用来标识是否允许获取远端的配置，默认为true
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; enabled &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;// 从远端获取配置的默认profile，默认为default
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String profile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;// 获取远端配置的应用名，对应于环境变量spring.application.name，默认为application
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;@Value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${spring.application.name:application}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String name&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;// 拉取远端配置的标签名，默认的是在config server中设置（如git默认为master）
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String label&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;//远端配置服务器的地址，默认为http://localhost:8888
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String uri &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://localhost:8888&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，&lt;code&gt;ConfigClientProperties&lt;/code&gt;中定义了profile、应用名、标签、远端服务器的地址等属性。这些都是config client启动时必需的信息，如果没有这些客户端的配置，将不能正确地从Config Server获取其对应的配置信息。&lt;/p&gt;
&lt;p&gt;另一个属性资源的定位器类&lt;code&gt;ConfigServicePropertySourceLocator&lt;/code&gt;依赖于客户端应用配置的属性信息，从远程服务器上请求该应用的配置。下面我们具体看一下该实现类。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ConfigServicePropertySourceLocator&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; PropertySourceLocator &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;@Retryable&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;interceptor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;configServerRetryInterceptor&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; PropertySource&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; locate&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Environment environment&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		ConfigClientProperties properties &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;defaultProperties&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;override&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;environment&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		CompositePropertySource composite &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CompositePropertySource&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;configService&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		RestTemplate restTemplate &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;restTemplate&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; getSecureRestTemplate&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;properties&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
				&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;restTemplate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
			String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; labels &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;};&lt;/span&gt;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;StringUtils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hasText&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;properties&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getLabel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
				labels &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringUtils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;commaDelimitedListToStringArray&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;properties&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getLabel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
			String state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ConfigClientStateHolder&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getState&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 3
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String label &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; labels&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
				Environment result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getRemoteEnvironment&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;restTemplate&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
						properties&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; label&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;trim&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt; state&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 4
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;result &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
					&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getPropertySources&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 5
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;						&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;PropertySource source &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getPropertySources&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
							Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Object&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; map &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Object&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;)&lt;/span&gt; source
									&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getSource&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
							composite&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;addPropertySource&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MapPropertySource&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;source
									&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt; map&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
						&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
					&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
					&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;StringUtils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hasText&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getState&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; StringUtils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hasText&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getVersion&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 6
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;						HashMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Object&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; map &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; HashMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
						putValue&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;map&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;config.client.state&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getState&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
						putValue&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;map&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;config.client.version&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getVersion&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
						composite&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;addFirstPropertySource&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MapPropertySource&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;configClient&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; map&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
					&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
					&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; composite&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
				&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
			&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;properties&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isFailFast&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 7
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalStateException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
					&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Could not locate PropertySource ..&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; error&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;RestTemplate对象是否初始化，如果没有则调用getSecureRestTemplate，并传入完整前缀的ConfigClientProperties；&lt;/li&gt;
&lt;li&gt;将传入的label转换成labels数组，label的格式诸如&lt;code&gt;dev,test&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;这边使用了ThreadLocal保存请求中头部的X-Config-State；&lt;/li&gt;
&lt;li&gt;尝试labels数组，通过指定的配置服务器信息，循环调用获取远端的环境配置信息；&lt;/li&gt;
&lt;li&gt;PropertySources的设置，当使用XML时，&lt;code&gt;result.getPropertySources()&lt;/code&gt;可能为空；&lt;/li&gt;
&lt;li&gt;其他信息的设置，客户端的状态以及版本号等；&lt;/li&gt;
&lt;li&gt;FailFast，如果设置快速响应失败，失败时抛出异常。&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>配置中心 Spring Cloud Config：获取Resource的端点</title>
      <link>https://jackiezhongtian.github.io:443/post/config-15/</link>
      <pubDate>Mon, 14 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jackiezhongtian.github.io:443/post/config-15/</guid>
      
        <description>&lt;p&gt;开始新的系列文章更新，一起在技术的路上精进！将会介绍Spring Cloud 中提供了分布式配置中心Spring Cloud Config。应用服务中除了实现系统功能的代码，还需要连接资源和其它应用，经常有很多需要在外部配置的数据去调整应用的行为，如切换不同的数据库，设置功能开关等。随着微服务的不断增加，需要系统具备可伸缩和可扩展性，除此之外就是管理相当多的服务实例的配置数据。在应用的开发阶段由各个服务自治，但是到了生产环境之后会给运维带来很大的麻烦，特别是微服务的规模比较大，配置的更新更为麻烦。为此，系统需要建立一个统一的配置管理中心。&lt;/p&gt;
&lt;h5 id=&#34;获取resource的端点&#34;&gt;获取Resource的端点&lt;/h5&gt;
&lt;p&gt;Resource提供的API端点实现其实有些类似Environment端点的实现，在此我们仅简单介绍。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/{name}/{profile}/{label}/**&lt;/li&gt;
&lt;li&gt;/{name}/{profile}/**&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体对应到URI为/config-client/dev/master/config-client-dev.yml。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jackiezhongtian.github.io:443/img/config/config-git-resource.png&#34; alt=&#34;获取资源文件的时序图&#34; title=&#34;config-git-resource&#34;&gt;&lt;/p&gt;
&lt;p&gt;获取资源文件的过程和获取环境变量的过程类似，不同的是，当返回的是一个指定的配置文件时，Resource控制器默认会将文件中的占位符替换，这需要调用环境仓储的实现类，最后将替换后的资源文件返回给客户端。&lt;/p&gt;
&lt;p&gt;Resource控制器和EnvironmentController的初始化过程类似，ResourceController控制器依赖的获取资源文件的EnvironmentRepository也是“Encryptor”代理类，会将解密后的属性值返回给客户端应用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ResourceController&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/{name}/{profile}/{label}/**&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;retrieve&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@PathVariable&lt;/span&gt; String name&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;@PathVariable&lt;/span&gt; String profile&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
			&lt;span style=&#34;color:#a6e22e&#34;&gt;@PathVariable&lt;/span&gt; String label&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; HttpServletRequest request&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
			&lt;span style=&#34;color:#a6e22e&#34;&gt;@RequestParam&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;defaultValue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; resolvePlaceholders&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; IOException &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		String path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getFilePath&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;request&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; name&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; profile&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; label&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; retrieve&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; profile&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; label&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; path&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; resolvePlaceholders&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;synchronized&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;retrieve&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String name&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String profile&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String label&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String path&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; resolvePlaceholders&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; IOException &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;InputStream is &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;resourceRepository&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;findOne&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; profile&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; label&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; path&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
				&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getInputStream&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
			String text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StreamUtils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;copyToString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;is&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Charset&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;forName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;resolvePlaceholders&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
				Environment environment &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;environmentRepository&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;findOne&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
						profile&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; label&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
				text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; resolvePlaceholders&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;prepareEnvironment&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;environment&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt; text&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
			&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; text&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;#getFilePath&lt;/code&gt;方法没有列出，其作用是将请求的URI截取出path属性。获取具体应用的资源文件&lt;code&gt;#findOne&lt;/code&gt;，需要应用名、profile、label和文件名，根据这些参数便可以得到相应的资源文件，Resource流转换成字符串返回给客户端。默认会将资源文件中的系统环境变量占位符进行替换。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>全的 JVM 面试知识点：运行时数据区</title>
      <link>https://jackiezhongtian.github.io:443/post/jvm-1/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jackiezhongtian.github.io:443/post/jvm-1/</guid>
      
        <description>&lt;p&gt;本系列文章讲解 面试中常见的 JVM 问题。这些问题之所以常见，是因为很基础，对于一个有点逼格的程序猿来说， JVM 的相关特性和原理在工作也需要熟知。笔者也在面试的过程中屡屡受挫，屡败屡战，总结一些常见知识点，这些知识点既可以应付面试，也可以帮助读者深入了解 JVM 提供大纲。&lt;/p&gt;
&lt;p&gt;在用 C 之类的编程语言时，程序员需要自己手动分配和释放内存。而 Java 不一样，它有垃圾回收器，释放内存由回收器负责。&lt;/p&gt;
&lt;p&gt;Java 虚拟机在执行 Java 程序的过程中会把它管理的内存划分成若干个不同的数据区域。那我们来简单看一下 Java 程序具体执行的过程：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://image.blueskykong.com/jvm-execute.png&#34; alt=&#34;图片来自 https://www.cnblogs.com/dolphin0520/p/3613043.html&#34; title=&#34;图片来自https://www.cnblogs.com/dolphin0520/p/3613043.html&#34;&gt;&lt;/p&gt;
&lt;p&gt;首先 Java 源代码文件(.java 后缀)会被 Java 编译器编译为字节码文件(.class 后缀)，然后由 JVM 中的类加载器加载各个类的字节码文件，加载完毕之后，交由 JVM 执行引擎执行。在整个程序执行过程中，JVM 会用一段空间来存储程序执行期间需要用到的数据和相关信息，这段空间一般被称作为 Runtime Data Area（运行时数据区），也就是我们常说的 JVM 内存。因此，在 Java 中我们常常说到的内存管理就是针对这段空间进行管理（如何分配和回收内存空间）。&lt;/p&gt;
&lt;p&gt;本文的主要内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JVM 内存划分
&lt;ul&gt;
&lt;li&gt;堆&lt;/li&gt;
&lt;li&gt;方法区&lt;/li&gt;
&lt;li&gt;运行时常量池&lt;/li&gt;
&lt;li&gt;Java 虚拟机栈&lt;/li&gt;
&lt;li&gt;本地方法栈&lt;/li&gt;
&lt;li&gt;程序计数器&lt;/li&gt;
&lt;li&gt;栈与堆&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;直接内存
&lt;ul&gt;
&lt;li&gt;堆外内存垃圾回收机制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JVM 类加载
&lt;ul&gt;
&lt;li&gt;类的加载过程&lt;/li&gt;
&lt;li&gt;JVM 预定义的类加载器&lt;/li&gt;
&lt;li&gt;双亲委派模式
&lt;ul&gt;
&lt;li&gt;双亲委派机制&lt;/li&gt;
&lt;li&gt;双亲委派作用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对象的创建
&lt;ul&gt;
&lt;li&gt;对象的内存布局&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对象的访问定位&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;jvm-内存划分&#34;&gt;JVM 内存划分&lt;/h3&gt;
&lt;p&gt;运行时数据区分为线程私有和共享数据区两大类。其中线程私有的数据区包含程序计数器、虚拟机栈、本地方法区，所有线程共享的数据区包含 Java 堆、方法区，在方法区内有一个常量池。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://image.blueskykong.com/jvm-region.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;下面我们依次介绍这些数据区。&lt;/p&gt;
&lt;h4 id=&#34;堆&#34;&gt;堆&lt;/h4&gt;
&lt;p&gt;堆用于存放对象实例，所有的对象和数组都要在堆上分配。是 JVM 所管理的内存中最大的一块区域。Java 堆是所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数组都在这里分配内存。Java 堆是垃圾收集器管理的主要区域，因此也被称作 GC 堆（Garbage Collected Heap）.从垃圾回收的角度，由于现在收集器基本都采用分代垃圾收集算法，所以 Java 堆还可以细分为：新生代和老年代。新生代具体划分有：Eden 空间、From Survivor、To Survivor 空间等，进一步划分的目的是更好地回收内存，或者更快地分配内存。&lt;/p&gt;
&lt;h4 id=&#34;方法区&#34;&gt;方法区&lt;/h4&gt;
&lt;p&gt;方法区与 Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即编译器编译后的代码等数据。&lt;br&gt;
HotSpot 虚拟机中方法区也常被称为&lt;code&gt;永久代&lt;/code&gt;，本质上两者并不等价。仅仅是因为 HotSpot 虚拟机设计团队用永久代来实现方法区而已，这样 HotSpot 虚拟机的垃圾收集器就可以像管理 Java 堆一样管理这部分内存了。但是这并不是一个好主意，因为这样更容易遇到内存溢出问题。相对而言，垃圾收集行为在这个区域是较少出现的，但并非数据进入方法区后就永久存在了。&lt;/p&gt;
&lt;h6 id=&#34;运行时常量池&#34;&gt;运行时常量池&lt;/h6&gt;
&lt;p&gt;运行时常量池是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有常量池信息（用于存放编译期生成的各种字面量和符号引用）&lt;/p&gt;
&lt;h4 id=&#34;java虚拟机栈&#34;&gt;Java虚拟机栈&lt;/h4&gt;
&lt;p&gt;Java 虚拟机栈是线程私有的，它的生命周期和线程相同，描述的是 Java 方法执行的内存模型。
Java 内存可以粗糙的区分为堆内存（Heap）和栈内存(Stack)，其中栈就是现在说的虚拟机栈，或者说是虚拟机栈中局部变量表部分。存储局部变量表、操作数栈、动态链接和方法出口等信息。
局部变量表主要存放了编译器可知的各种数据类型、对象引用。&lt;/p&gt;
&lt;h4 id=&#34;本地方法栈&#34;&gt;本地方法栈&lt;/h4&gt;
&lt;p&gt;和虚拟机栈所发挥的作用非常相似，区别是： 虚拟机栈为虚拟机执行 Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。  一个 Native Method 就是一个 Java 程序调用非 Java 代码的接口。在定义一个 Native method 时，并不提供实现体（有些像定义一个java interface），因为其实现体是由非 Java 语言在外面实现的。标识符native可以与所有其它的 Java 标识符连用，但是 abstract 除外。&lt;/p&gt;
&lt;p&gt;我们知道，当一个类第一次被使用到时，这个类的字节码会被加载到内存，并且只会回载一次。在这个被加载的字节码的入口维持着一个该类所有方法描述符的 list，这些方法描述符包含这样一些信息：方法代码存于何处，它有哪些参数，方法的描述符（public 等）等等。&lt;/p&gt;
&lt;p&gt;如果一个方法描述符内有 native，这个描述符块将有一个指向该方法的实现的指针。这些实现在一些 DLL 文件内，但是它们会被操作系统加载到 Java 程序的地址空间。当一个带有本地方法的类被加载时，其相关的 DLL 并未被加载，因此指向方法实现的指针并不会被设置。当本地方法被调用之前，这些 DLL 才会被加载，这是通过调用 &lt;code&gt;java.system.loadLibrary()&lt;/code&gt; 实现的。&lt;/p&gt;
&lt;p&gt;需要提示的是，使用本地方法是有开销的，它丧失了 Java 的很多好处。如果别无选择，我们可以选择使用本地方法。&lt;/p&gt;
&lt;h4 id=&#34;程序计数器&#34;&gt;程序计数器&lt;/h4&gt;
&lt;p&gt;程序计数器是一块较小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。字节码解释器工作时通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等功能都需要依赖这个计数器来完。
另外，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各线程之间计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。&lt;/p&gt;
&lt;h4 id=&#34;栈与堆&#34;&gt;栈与堆&lt;/h4&gt;
&lt;p&gt;栈解决程序的运行问题，即程序如何执行，或者说如何处理数据；堆解决的是数据存储的问题，即数据怎么放、放在哪儿。&lt;br&gt;
在 Java 中一个线程就会相应有一个线程栈与之对应，这点很容易理解，因为不同的线程执行逻辑有所不同，因此需要一个独立的线程栈。而堆则是所有线程共享的。栈因为是运行单位，因此里面存储的信息都是跟当前线程（或程序）相关信息的。包括局部变量、程序运行状态、方法返回值等等；而堆只负责存储对象信息。&lt;br&gt;
Java 的堆是一个运行时数据区，类的(对象从中分配空间。这些对象通过 new、newarray、anewarray 和 multianewarray 等指令建立，它们不需要程序代码来显式的释放。堆是由垃圾回收来负责的，堆的优势是可以动态地分配内存大小，生存期也不必事先告诉编译器，因为它是在运行时 动态分配内存的，Java 的垃圾收集器会自动收走这些不再使用的数据。但缺点是，由于要在运行时动态分配内存，存取速度较慢。栈的优势是，存取速度比堆要快，仅次于寄存器，栈数据可以共享。但缺点是，存在栈中的数据大小与生存期必须是确定的，缺乏灵活性。栈中主要存放一些基本类 型的变量（int, short, long, byte, float, double, boolean, char）和对象句柄。&lt;/p&gt;
&lt;h3 id=&#34;直接内存&#34;&gt;直接内存&lt;/h3&gt;
&lt;p&gt;在 Java 中当我们要对数据进行更底层的操作时，一般是操作数据的字节（byte）形式，这时经常会用到 ByteBuffer 这样一个类。ByteBuffer 提供了两种静态实例方式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; ByteBuffer &lt;span style=&#34;color:#a6e22e&#34;&gt;allocate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; capacity&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;  
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; ByteBuffer &lt;span style=&#34;color:#a6e22e&#34;&gt;allocateDirect&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; capacity&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为什么要提供两种方式呢？这与 Java 的内存使用机制有关。ByteBuffer 有两种，一种是 heap ByteBuffer，该类对象分配在 JVM 的堆内存里面，直接由 Java 虚拟机负责垃圾回收；一种是 direct ByteBuffer 是通过 JNI 在虚拟机外内存中分配的。JDK1.4 中新加入的 NIO(New Input/Output) 类，引入了一种基于通道（Channel） 与缓存区（Buffer） 的 I/O 方式，它可以直接使用 Native 函数库直接分配堆外内存，然后通过一个存储在 Java 堆中的 DirectByteBuffer 对象作为这块内存的引用进行操作。这样就能在一些场景中显著提高性能，因为避免了在 Java 堆和 Native 堆之间来回复制数据。本机直接内存的分配不会收到 Java 堆的限制，但是，既然是内存就会受到本机总内存大小以及处理器寻址空间的限制。通过 Jmap 无法查看该快内存的使用情况。只能通过 top 来看它的内存使用情况。&lt;/p&gt;
&lt;p&gt;直接内存并不是虚拟机运行时数据区的一部分，也不是虚拟机规范中定义的内存区域，但是这部分内存也被频繁地使用。而且也可能导致 OutOfMemoryError 异常出现。 DirectMemory 容量可以通过 &lt;code&gt;-XX:MaxDirectMemorySize&lt;/code&gt; 指定，如果不指定，则默认为与 Java 堆的最大值。&lt;/p&gt;
&lt;h4 id=&#34;堆外内存垃圾回收机制&#34;&gt;堆外内存垃圾回收机制&lt;/h4&gt;
&lt;p&gt;direct ByteBuffer 通过 full gc 来回收内存，direct ByteBuffer 会自己检测情况而调用 &lt;code&gt;system.gc()&lt;/code&gt;，但是如果参数中使用了 &lt;code&gt;-DisableExplicitGC&lt;/code&gt; 那么就无法回收该快内存了，&lt;code&gt;-XX:+DisableExplicitGC&lt;/code&gt; 标志自动将 &lt;code&gt;System.gc()&lt;/code&gt; 调用转换成一个空操作，就是应用中调用 &lt;code&gt;System.gc()&lt;/code&gt;会变成一个空操作，因此需要我们手动来回收内存了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Test&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testGcDirectBuffer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; NoSuchFieldException&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; IllegalAccessException &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        ByteBuffer buffer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ByteBuffer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;allocateDirect&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1024&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        Field cleanerField &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; buffer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getClass&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getDeclaredField&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cleaner&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        cleanerField&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setAccessible&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        Cleaner cleaner &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Cleaner&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; cleanerField&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;buffer&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        cleaner&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;clean&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;除此之外，CMS GC 也会回收 Direct ByteBuffer 的内存，CMS 主要是针对老年代空间的垃圾回收。&lt;/p&gt;
&lt;h3 id=&#34;jvm-类加载&#34;&gt;JVM 类加载&lt;/h3&gt;
&lt;p&gt;在 Java 中，类型的加载、连接和初始化过程都在程序运行期间完成的，这种策略虽然会使类加载时增加一些性能开销，但是提供了高度的灵活性，Java 天生可以动态扩展的语言就是依赖于运行期动态加载和动态连接的特点实现的。&lt;/p&gt;
&lt;p&gt;虚拟机把描述类的数据从 Class 文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的 Java 类型，这就是 Java 虚拟机的类加载机制。Class 文件是一串二进制的字节流。实际上，每个 Class 文件都有可能代表着 Java 语言中的一个类或者接口。&lt;/p&gt;
&lt;h4 id=&#34;类的加载过程&#34;&gt;类的加载过程&lt;/h4&gt;
&lt;p&gt;类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括：加载（Loading）、验证（Verification）、准备(Preparation)、解析(Resolution)、初始化(Initialization)、使用(Using)和卸载(Unloading)7个阶段。其中准备、验证、解析3个部分统称为连接（Linking）。
&lt;img src=&#34;http://image.blueskykong.com/class-loader.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;加载&lt;br&gt;
查找并加载类的二进制数据。
加载是类加载过程的第一个阶段，虚拟机在这一阶段需要完成以下三件事情：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过类的全限定名来获取其定义的二进制字节流；&lt;/li&gt;
&lt;li&gt;将字节流所代表的静态存储结构转化为方法区的运行时数据结构；&lt;/li&gt;
&lt;li&gt;在 Java 堆中生成一个代表这个类的 java.lang.Class 对象，作为对方法区中这些数据的访问入口。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;验证&lt;br&gt;
确保被加载的类的正确性。
这一阶段是确保 Class 文件的字节流中包含的信息符合当前虚拟机的规范，并且不会损害虚拟机自身的安全。包含了四个验证动作：文件格式验证，元数据验证，字节码验证，符号引用验证。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件格式检验 &lt;br&gt;
检验字节流是否符合Class文件格式的规范，并且能被当前版本的虚拟机处理。检验可能包含下列几种：是否以魔数开头、主次版本号是否在虚拟机的处理范围之内，常量池中的常量是否不被支持、文件是否被删除或附加什么信息等等。
只有通过文件格式检验的二进制字节流才能进入内存的方法区进行存储，所以后面的3个检验阶段都是基于方法区的存储结构进行的，不会在操作字节流。&lt;/li&gt;
&lt;li&gt;元数据检验&lt;br&gt;
对字节码描述的信息进行语义分析，以保证其描述的内容符合Java语言规范的要求。
验证点包括：是否有父类（除了object）、父类是否继承了不可被继承的类（被final修饰的类）、如果这个类不是抽象类，是否实现了其父类或接口之中要求实现的所有方法、类中的方法和字段是否与父类产生矛盾（覆盖了父类的final字段、出现不合规矩的方法重载等）。
元数据检验主要是对类的元数据信息进行语义校验，保证不符合Java语言规范的元数据信息不存在。&lt;/li&gt;
&lt;li&gt;字节码检验&lt;br&gt;
通过数据流和控制流分析，确定程序语义是合法、符合逻辑的。第二阶段是对元数据信息中的数据类型做了检验，这一阶段是对类的方法体进行校验分析，保证被校验类的方法在运行时不会做出危害虚拟机安全的事情。&lt;br&gt;
检验点包括：保证任意时刻操作数栈的数据类型与指令代码序列都能配合工作、保证指令跳转不会跳转到方法体之外的地方、保证方法体内的类型转换都是有效的。
事实上，即便是经过字节码检验后的方法体也不一定是安全的。&lt;/li&gt;
&lt;li&gt;符号引用检验 &lt;br&gt;
最后一个检验发生在虚拟机将符号引用转化为直接引用时，这个转化动作将在连接的第三阶段–解析阶段中发生的。符号引用检验可以看作是对类自身以外（常量池中的各种符号引用）的信息进行匹配性校验。
校验点：符号引用中通过字符串描述的全限定名是否能找到对应的类、在指定类中是否存在符合方法的字段描述符以及简单名称所描述的方法和字段、符号引用中的类、字段、方法的访问权限是否能让当前类访问到等。
符号引用检验的目的是确保解析动作的正常执行，如果无法通过符号引用检验，将会抛出  &lt;code&gt;java.lang.IncompatibleClassChangeError&lt;/code&gt; 异常的子类，如 &lt;code&gt;IllegalAccessError&lt;/code&gt;、&lt;code&gt;NoSuchfiledError&lt;/code&gt;、&lt;code&gt;NoSuchMethodError&lt;/code&gt; 等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;准备&lt;br&gt;
为类的静态变量分配内存，并将其初始化为默认值。
准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些内存都将在方法区中分配。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解析&lt;br&gt;
把类中的符号引用转换为直接引用。
解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程，解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用点限定符 7 类符号引用进行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;初始化&lt;br&gt;
类变量进行初始化
为类的静态变量赋予正确的初始值，JVM 负责对类进行初始化，主要对类变量进行初始化。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;jvm-预定义的类加载器&#34;&gt;JVM 预定义的类加载器&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;http://image.blueskykong.com/jvm-classloader.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启动（Bootstrap）类加载器&lt;br&gt;
引导类装入器是用本地代码实现的类装入器，它负责将 &amp;lt; JavaRuntimeHome &amp;gt;/lib 下面的类库加载到内存中。由于引导类加载器涉及到虚拟机本地实现细节，开发者无法直接获取到启动类加载器的引用。&lt;/li&gt;
&lt;li&gt;标准扩展（Extension）类加载器&lt;br&gt;
扩展类加载器，负责将 &amp;lt; Java_Runtime_Home &amp;gt;/lib/ext 或者由系统变量 java.ext.dir 指定位置中的类库加载到内存中。开发者可以直接使用标准扩展类加载器。&lt;/li&gt;
&lt;li&gt;应用程序类加载器（Application）&lt;br&gt;
应用程序类加载器（Application ClassLoader）：负责加载用户路径（classpath）上的类库。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除此之外，还有用户自定义类加载器，是 java.lang.ClassLoader 的子类。在程序运行期间，通过java.lang.ClassLoader 的子类动态加载 class 文件，体现 Java 动态实时类装入特性.&lt;/p&gt;
&lt;h4 id=&#34;双亲委派模式&#34;&gt;双亲委派模式&lt;/h4&gt;
&lt;p&gt;双亲委派模型的工作流程是：如果一个类加载器收到了类加载的请求，它首先不会自己去加载这个类，而是把请求委托给父加载器去完成，依次向上。因此，所有的类加载请求最终都应该被传递到顶层的启动类加载器中，只有当父加载器没有找到所需的类时，子加载器才会尝试去加载该类。&lt;/p&gt;
&lt;h5 id=&#34;双亲委派机制&#34;&gt;双亲委派机制&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;当 AppClassLoader 加载一个 class 时，它首先不会自己去尝试加载这个类，而是把类加载请求委派给父类加载器 ExtClassLoader 去完成。&lt;/li&gt;
&lt;li&gt;当 ExtClassLoader 加载一个 class 时，它首先也不会自己去尝试加载这个类，而是把类加载请求委派给 BootStrapClassLoader 去完成。&lt;/li&gt;
&lt;li&gt;如果 BootStrapClassLoader 加载失败，会使用 ExtClassLoader 来尝试加载；&lt;/li&gt;
&lt;li&gt;若 ExtClassLoader 也加载失败，则会使用 AppClassLoader 来加载，如果 AppClassLoader 也加载失败，则会报出异常 ClassNotFoundException。&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;双亲委派作用&#34;&gt;双亲委派作用&lt;/h5&gt;
&lt;p&gt;通过带有优先级的层级关系可以避免类的重复加载；
保证 Java 程序安全稳定运行，Java 核心 API 定义类型不会被随意替换。&lt;/p&gt;
&lt;h4 id=&#34;对象的创建&#34;&gt;对象的创建&lt;/h4&gt;
&lt;p&gt;虚拟机遇到一条 new 指令时，首先将去检查这个指令的参数是否能在常量池中定位到这个类的符号引用，并且检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没有，那必须先执行相应的类加载过程。&lt;/p&gt;
&lt;p&gt;在类加载检查通过后，接下来虚拟机将为新生对象分配内存。对象所需的内存大小在类加载完成后便可确定，为对象分配空间的任务等同于把一块确定大小的内存从Java堆中划分出来。分配方式有 “指针碰撞” 和 “空闲列表” 两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指针碰撞
把指针向空闲对象移动与对象占用内存大小相等的距离。&lt;/li&gt;
&lt;li&gt;空闲列表
虚拟机维护一个列表,记录可用的内存块，分配给对象列表中一块足够大的内存空间。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;选择那种分配方式由Java堆是否规整决定，而Java堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定。虚拟机采用CAS配上失败重试的方式保证更新操作的原子性。&lt;/p&gt;
&lt;h5 id=&#34;对象的内存布局&#34;&gt;对象的内存布局&lt;/h5&gt;
&lt;p&gt;在 Hotspot 虚拟机中，对象在内存中的布局可以分为3块区域：对象头、实例数据和对齐填充。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对象头，Hotspot 虚拟机中的对象头包括两部分信息，第一部分用于存储对象自身的自身运行时数据（哈希吗、GC 分代年龄、锁状态标志等等）；另一部分是类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是那个类的实例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实例数据，是对象真正存储的有效信息，也是在程序中所定义的各种类型的字段内容。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对齐填充部分，不是必然存在的，也没有什么特别的含义，仅仅起占位作用。 因为Hotspot虚拟机的自动内存管理系统要求对象起始地址必须是8字节的整数倍，换句话说就是对象的大小必须是8字节的整数倍。而对象头部分正好是8字节的倍数（1倍或2倍），因此，当对象实例数据部分没有对齐时，就需要通过对齐填充来补全。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;对象的访问定位&#34;&gt;对象的访问定位&lt;/h4&gt;
&lt;p&gt;建立对象就是为了使用对象，我们的Java程序通过栈上的reference数据来操作堆上的具体对象。对象的访问方式由虚拟机实现而定，目前主流的访问方式有句柄和直接指针两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用句柄，那么 Java 堆中将会划分出一块内存来作为句柄池，reference 中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自的具体地址信息；&lt;/li&gt;
&lt;li&gt;直接指针访问，那么 Java 堆对象的布局中就必须考虑如何防止访问类型数据的相关信息，reference 中存储的直接就是对象的地址。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这两种对象访问方式各有优势。使用句柄来访问的最大好处是 reference 中存储的是稳定的句柄地址，在对象被移动时只会改变句柄中的实例数据指针。而 reference 本身不需要修改。使用直接指针访问方式最大的好处就是速度快，它节省了一次指针定位的时间开销。&lt;/p&gt;
&lt;h3 id=&#34;小结&#34;&gt;小结&lt;/h3&gt;
&lt;p&gt;本文主要讲了 JVM 中运行时数据区的划分以及类加载机制。JVM 中的对象创建之后，如何回收无用的对象呢？JVM 的垃圾回收算法和多种垃圾收集器是怎么样的呢？下篇文章将会具体讲解。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>配置中心 Spring Cloud Config：Config Server提供的端点</title>
      <link>https://jackiezhongtian.github.io:443/post/config-14/</link>
      <pubDate>Fri, 04 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jackiezhongtian.github.io:443/post/config-14/</guid>
      
        <description>&lt;p&gt;开始新的系列文章更新，一起在技术的路上精进！将会介绍Spring Cloud 中提供了分布式配置中心Spring Cloud Config。应用服务中除了实现系统功能的代码，还需要连接资源和其它应用，经常有很多需要在外部配置的数据去调整应用的行为，如切换不同的数据库，设置功能开关等。随着微服务的不断增加，需要系统具备可伸缩和可扩展性，除此之外就是管理相当多的服务实例的配置数据。在应用的开发阶段由各个服务自治，但是到了生产环境之后会给运维带来很大的麻烦，特别是微服务的规模比较大，配置的更新更为麻烦。为此，系统需要建立一个统一的配置管理中心。&lt;/p&gt;
&lt;h4 id=&#34;config-server提供的端点&#34;&gt;Config Server提供的端点&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;ConfigServerMvcConfiguration&lt;/code&gt;对Controller的端点进行配置。配置服务器对外提供的API端点包括三类：Environment、Resource以及加密解密的端点。我们将会介绍前两类常用的API端点。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Configuration&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@ConditionalOnWebApplication&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ConfigServerMvcConfiguration&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; WebMvcConfigurerAdapter &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; EnvironmentController &lt;span style=&#34;color:#a6e22e&#34;&gt;environmentController&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;EnvironmentRepository envRepository&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; ConfigServerProperties server&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		EnvironmentController controller &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; EnvironmentController&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;encrypted&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;envRepository&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; server&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;objectMapper&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		controller&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setStripDocumentFromYaml&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isStripDocumentFromYaml&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; controller&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; EnvironmentRepository &lt;span style=&#34;color:#a6e22e&#34;&gt;encrypted&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;EnvironmentRepository envRepository&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; ConfigServerProperties server&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		EnvironmentEncryptorEnvironmentRepository encrypted &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; EnvironmentEncryptorEnvironmentRepository&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
				envRepository&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;environmentEncryptor&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		encrypted&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setOverrides&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getOverrides&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; encrypted&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;配置文件&lt;code&gt;ConfigServerMvcConfiguration&lt;/code&gt;将&lt;code&gt;EnvironmentController&lt;/code&gt;加入了Spring的上下文中，并自动注入&lt;code&gt;EnvironmentRepository&lt;/code&gt;和&lt;code&gt;ConfigServerProperties&lt;/code&gt;对象。
在将配置信息返回给客户端服务之前，远端加密的属性值将会被解密(以{cipher}开头的字符串)。这里的&lt;code&gt;#encrypted&lt;/code&gt;方法，就是将给定的&lt;code&gt;EnvironmentRepository&lt;/code&gt;再次封装，返回一个代理类用以解密属性。&lt;code&gt;Overrides&lt;/code&gt;属性，即为在配置服务器设置的属性，用以强制覆写客户端对应的环境变量，这里一起封装到代理类。&lt;code&gt;stripDocumentFromYaml&lt;/code&gt;属性用来标识不是map的YAML文档应该去掉Spring增加的文档的前缀，默认为true。&lt;/p&gt;
&lt;h5 id=&#34;获取environment的端点&#34;&gt;获取Environment的端点&lt;/h5&gt;
&lt;p&gt;Environment控制器提供了如下的端点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/{application}/{profile}[/{label}]&lt;/li&gt;
&lt;li&gt;/{application}-{profile}.yml&lt;/li&gt;
&lt;li&gt;/{label}/{application}-{profile}.yml&lt;/li&gt;
&lt;li&gt;/{application}-{profile}.properties&lt;/li&gt;
&lt;li&gt;/{label}/{application}-{profile}.properties&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如上的格式都可以获取指定应用的配置环境信息。如URI为/config-client/dev、/config-client-dev.yml等。&lt;/p&gt;
&lt;p&gt;配置仓库采用Git的方式，获取指定应用的Environment过程如下：
&lt;img src=&#34;https://jackiezhongtian.github.io:443/img/config/git-config-sequence.png&#34; alt=&#34;获取环境配置时序图&#34; title=&#34;时序图&#34;&gt;&lt;/p&gt;
&lt;p&gt;通过请求的时序图，可以清楚地知道客户端每次拉取的配置都是本地仓库复制的那一份，通过&lt;code&gt;NativeEnvironmentRepository&lt;/code&gt;代理获取指定应用的配置；Config Server每次都会检查指定Git仓库的状态，当远端仓库有更新时，则会fetch到本地进行更新。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EnvironmentController&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;//根据参数应用名和profile，返回Environment对象
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/{name}/{profiles:.*[^-].*}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Environment &lt;span style=&#34;color:#a6e22e&#34;&gt;defaultLabel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@PathVariable&lt;/span&gt; String name&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
			&lt;span style=&#34;color:#a6e22e&#34;&gt;@PathVariable&lt;/span&gt; String profiles&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; labelled&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; profiles&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/{label}/{name}-{profiles}.properties&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; ResponseEntity&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;labelledProperties&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@PathVariable&lt;/span&gt; String name&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
			&lt;span style=&#34;color:#a6e22e&#34;&gt;@PathVariable&lt;/span&gt; String profiles&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;@PathVariable&lt;/span&gt; String label&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
			&lt;span style=&#34;color:#a6e22e&#34;&gt;@RequestParam&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;defaultValue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; resolvePlaceholders&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; IOException &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		validateProfiles&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;profiles&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		Environment environment &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; labelled&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; profiles&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; label&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Object&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; properties &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; convertToProperties&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;environment&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		String propertiesString &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getPropertiesString&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;properties&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;resolvePlaceholders&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
			propertiesString &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; resolvePlaceholders&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;prepareEnvironment&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;environment&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
					propertiesString&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; getSuccess&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;propertiesString&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;//...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;控制器调用相应环境仓库实现的&lt;code&gt;#findOne&lt;/code&gt;方法。既可以返回完整的Environment对象，包括name、profiles、propertySources这些信息，也可以直接返回配置仓库中的源配置数据，还可以直接返回处理之后的json对象。&lt;code&gt;/{label}/{name}-{profiles}.properties&lt;/code&gt;这个接口对应的实现中，首先调用&lt;code&gt;#labelled&lt;/code&gt;方法返回Environment对象，然后将对象转换成map，由map转成string，最后替换掉系统的环境变量的占位符，返回文本对象。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>配置中心 Spring Cloud Config：获取指定服务的资源文件</title>
      <link>https://jackiezhongtian.github.io:443/post/config-13/</link>
      <pubDate>Mon, 30 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jackiezhongtian.github.io:443/post/config-13/</guid>
      
        <description>&lt;p&gt;开始新的系列文章更新，一起在技术的路上精进！将会介绍Spring Cloud 中提供了分布式配置中心Spring Cloud Config。应用服务中除了实现系统功能的代码，还需要连接资源和其它应用，经常有很多需要在外部配置的数据去调整应用的行为，如切换不同的数据库，设置功能开关等。随着微服务的不断增加，需要系统具备可伸缩和可扩展性，除此之外就是管理相当多的服务实例的配置数据。在应用的开发阶段由各个服务自治，但是到了生产环境之后会给运维带来很大的麻烦，特别是微服务的规模比较大，配置的更新更为麻烦。为此，系统需要建立一个统一的配置管理中心。&lt;/p&gt;
&lt;h4 id=&#34;获取指定服务的资源文件&#34;&gt;获取指定服务的资源文件&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;ResourceRepositoryConfiguration&lt;/code&gt;是资源的配置类，在&lt;code&gt;SearchPathLocator&lt;/code&gt;对象存在时，将&lt;code&gt;ResourceRepository&lt;/code&gt;加入到Spring的上下文中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@ConditionalOnBean&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SearchPathLocator&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; ResourceRepository &lt;span style=&#34;color:#a6e22e&#34;&gt;resourceRepository&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SearchPathLocator service&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; GenericResourceRepository&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;service&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;前面讲到&lt;code&gt;EnvironmentRepository&lt;/code&gt;，相比而言&lt;code&gt;ResourceRepository&lt;/code&gt;用来定位一个应用的资源，返回的是某一个具体的资源文件，最后其内容转换成文本格式；而&lt;code&gt;EnvironmentRepository&lt;/code&gt;返回的信息更加全面，是一种键值对的格式，包括应用的基本信息，指定应用的配置源（可能来自多个源或者共享配置文件），这些键值对可以替换资源文本中的占位符。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ResourceRepository&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	Resource &lt;span style=&#34;color:#a6e22e&#34;&gt;findOne&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String name&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String profile&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String label&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String path&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后返回的&lt;code&gt;Resource&lt;/code&gt;是一个资源描述符的接口，用于抽象底层资源的实际类型，如文件或类路径资源。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;spring:
  profiles: dev

cloud:
  version: Camden SR4
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面是示例项目中客户端服务获取其对应的资源文件的结果，Resource流经过转化成String文本，
&lt;code&gt;ResourceRepository&lt;/code&gt;接口的实现类为&lt;code&gt;GenericResourceRepository&lt;/code&gt;，覆写了findOne方法，返回配置数据。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GenericResourceRepository&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; ResourceRepository&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; ResourceLoaderAware &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; SearchPathLocator service&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;//通过构造函数设置SearchPathLocator对象
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GenericResourceRepository&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SearchPathLocator service&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;service&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; service&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;//...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;synchronized&lt;/span&gt; Resource &lt;span style=&#34;color:#a6e22e&#34;&gt;findOne&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String application&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String profile&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String label&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
			String path&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; locations &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;service&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getLocations&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;application&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; profile&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; label&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getLocations&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; locations&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
				String location &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; locations&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String local &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; getProfilePaths&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;profile&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; path&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
					Resource file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;resourceLoader&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getResource&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;location&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
							&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;createRelative&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;local&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
					&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;exists&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isReadable&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
						&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
					&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
				&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
			&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
		&lt;span style=&#34;color:#75715e&#34;&gt;//...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从上面实现来看，主要是通过构造函数设置&lt;code&gt;SearchPathLocator&lt;/code&gt;对象，传入应用名等参数调用&lt;code&gt;#getLocations&lt;/code&gt;方法得到配置资源的具体路径，&lt;code&gt;SearchPathLocator&lt;/code&gt;的实现类会保证是最新的配置仓库。因为profile可以有默认值default，在创建资源文件之前，先调用&lt;code&gt;#getProfilePaths&lt;/code&gt;方法根据profile值对path进行处理，然后由&lt;code&gt;resourceLoader&lt;/code&gt;的&lt;code&gt;#getResource(location)&lt;/code&gt;方法创建绝对路径的配置资源。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>配置中心 Spring Cloud Config： 组合方式获取环境配置</title>
      <link>https://jackiezhongtian.github.io:443/post/config-12/</link>
      <pubDate>Thu, 26 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jackiezhongtian.github.io:443/post/config-12/</guid>
      
        <description>&lt;p&gt;开始新的系列文章更新，一起在技术的路上精进！将会介绍Spring Cloud 中提供了分布式配置中心Spring Cloud Config。应用服务中除了实现系统功能的代码，还需要连接资源和其它应用，经常有很多需要在外部配置的数据去调整应用的行为，如切换不同的数据库，设置功能开关等。随着微服务的不断增加，需要系统具备可伸缩和可扩展性，除此之外就是管理相当多的服务实例的配置数据。在应用的开发阶段由各个服务自治，但是到了生产环境之后会给运维带来很大的麻烦，特别是微服务的规模比较大，配置的更新更为麻烦。为此，系统需要建立一个统一的配置管理中心。&lt;/p&gt;
&lt;h4 id=&#34;组合方式获取环境配置&#34;&gt;组合方式获取环境配置&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;CompositeConfiguration&lt;/code&gt;负责配置多个有优先级的&lt;code&gt;EnvironmentRepository&lt;/code&gt;。在有些场景下，我们可能需要从多个环境仓库中拉取配置数据。通过在config server中的application.properties或application.yml激活多个profile，比如同时从Git和SVN仓库拉取配置数据，可以配置如下的属性：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spring&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;profiles&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;active&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;git, svn&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;cloud&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;config&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;server&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;svn&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;uri&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;file:///path/to/svn/repo&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;order&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;git&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;uri&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;file:///path/to/git/repo&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;order&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;除了可以指定一个仓库的URI，还可以指定优先级&lt;code&gt;order&lt;/code&gt;属性。&lt;code&gt;order&lt;/code&gt;属性允许你为所有的仓库设置优先级。&lt;code&gt;order&lt;/code&gt;属性的数值越小，优先级越高。仓库之间如果包含相同的属性，优先级属性帮助解决了其潜在的任何冲突。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Configuration&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@ConditionalOnMissingBean&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;CompositeEnvironmentRepository&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CompositeConfiguration&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;@Primary&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;@ConditionalOnBean&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SearchPathLocator&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; SearchPathCompositeEnvironmentRepository &lt;span style=&#34;color:#a6e22e&#34;&gt;searchPathCompositeEnvironmentRepository&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SearchPathCompositeEnvironmentRepository&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;environmentRepos&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;@Primary&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;@ConditionalOnMissingBean&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SearchPathLocator&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; CompositeEnvironmentRepository &lt;span style=&#34;color:#a6e22e&#34;&gt;compositeEnvironmentRepository&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CompositeEnvironmentRepository&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;environmentRepos&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;//...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如上为&lt;code&gt;CompositeConfiguration&lt;/code&gt;的实现，将&lt;code&gt;SearchPathCompositeEnvironmentRepository&lt;/code&gt;和&lt;code&gt;CompositeEnvironmentRepository&lt;/code&gt;加入到Spring的上下文中，分别对应于之前讲的&lt;code&gt;SearchPathLocator&lt;/code&gt;和&lt;code&gt;EnvironmentRepository&lt;/code&gt;。下面看一下&lt;code&gt;CompositeEnvironmentRepository&lt;/code&gt;中的主要实现。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Environment &lt;span style=&#34;color:#a6e22e&#34;&gt;findOne&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String application&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String profile&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String label&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		Environment env &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Environment&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;application&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; String&lt;span style=&#34;color:#f92672&#34;&gt;[]{&lt;/span&gt;profile&lt;span style=&#34;color:#f92672&#34;&gt;},&lt;/span&gt; label&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;environmentRepositories&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
			Environment envRepo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; environmentRepositories&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;findOne&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;application&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; profile&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; label&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
			env&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;addAll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;envRepo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getPropertySources&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
			env&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setVersion&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;envRepo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getVersion&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
			env&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setState&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;envRepo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getState&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;EnvironmentRepository repo &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; environmentRepositories&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
				env&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;addAll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;repo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;findOne&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;application&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; profile&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; label&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getPropertySources&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
			&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; env&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;CompositeEnvironmentRepository&lt;/code&gt;实现了&lt;code&gt;EnvironmentRepository&lt;/code&gt;接口，如上为findOne方法的实现。复合环境仓库的模式也比较简单，&lt;code&gt;EnvironmentRepository&lt;/code&gt;的实现是一个数组的形式，首先判断环境仓库的数量，多个则需要遍历，最后调用每种环境仓库的findOne实现。&lt;/p&gt;
&lt;p&gt;而&lt;code&gt;SearchPathCompositeEnvironmentRepository&lt;/code&gt;继承自&lt;code&gt;CompositeEnvironmentRepository&lt;/code&gt;，实现了&lt;code&gt;SearchPathLocator&lt;/code&gt;接口，用以获取config文件的路径。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Locations &lt;span style=&#34;color:#a6e22e&#34;&gt;getLocations&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String application&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String profile&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String label&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; locations &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;EnvironmentRepository repo &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;environmentRepositories&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;repo &lt;span style=&#34;color:#66d9ef&#34;&gt;instanceof&lt;/span&gt; SearchPathLocator&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
				locations&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;addAll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Arrays&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;asList&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(((&lt;/span&gt;SearchPathLocator&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; repo&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getLocations&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;application&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; profile&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; label&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getLocations&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()));&lt;/span&gt;
			&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Locations&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;application&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; profile&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; label&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; locations&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toArray&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; String&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;locations&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()]));&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实现在之前的基础上，加上了对多个&lt;code&gt;EnvironmentRepository&lt;/code&gt;的遍历处理，整合了多个环境仓库的路径。&lt;/p&gt;
&lt;p&gt;当使用复合环境仓库时，不同的仓库都应该包含相同的分支（label）。如果你有一个环境，当你请求Git仓库中label为master的配置数据时，然而SVN仓库并没有包含这样的一个叫做master的分支，就会导致整个请求的失败。另外需要注意的是，当从一个环境仓库获取数值失败时，都会导致复合环境仓库的失败。&lt;/p&gt;
&lt;p&gt;除了使用 Spring Cloud提供的环境仓库，还可以自定义&lt;code&gt;EnvironmentRepository&lt;/code&gt;作为复合仓库的一部分。只需要实现&lt;code&gt;EnvironmentRepository&lt;/code&gt;接口，至于环境仓库的优先级，可以通过&lt;code&gt;Ordered&lt;/code&gt;并覆写&lt;code&gt;getOrdered&lt;/code&gt;方法，如果没有实现该接口，自定义的环境仓库的优先级默认为最低的。&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>
